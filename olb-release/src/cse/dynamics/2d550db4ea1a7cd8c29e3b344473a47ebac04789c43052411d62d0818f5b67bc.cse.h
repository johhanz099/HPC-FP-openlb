/*  This file is part of the OpenLB library
 *
 *  Copyright (C) 2021-24 Adrian Kummerlaender, Shota Ito
 *  E-mail contact: info@openlb.net
 *  The most recent release of OpenLB can be downloaded at
 *  <http://www.openlb.net/>
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public
 *  License along with this program; if not, write to the Free
 *  Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA  02110-1301, USA.
*/

/*  ========================================================
 *  ==  WARNING: This is an automatically generated file, ==
 *  ==                  do not modify.                    ==
 *  ========================================================
 */

#pragma once


namespace olb {

namespace dynamics {

template <typename T, typename... FIELDS>
struct CSE<CombinedRLBdynamics<T, descriptors::D3Q19<FIELDS...>, dynamics::Tuple<T, descriptors::D3Q19<FIELDS...>, momenta::Tuple<momenta::BulkDensity, momenta::BulkMomentum, momenta::BulkStress, momenta::DefineToNEq>, equilibria::SecondOrder, collision::BGK, dynamics::DefaultCombination>, momenta::Tuple<momenta::InnerEdgeDensity3D<0, -1, 1>, momenta::FixedVelocityMomentumGeneric, momenta::InnerEdgeStress3D<0, -1, 1>, momenta::DefineSeparately> >> {
template <concepts::Cell CELL, concepts::Parameters PARAMETERS, concepts::BaseType V=typename CELL::value_t>
CellStatistic<V> collide(CELL& cell, PARAMETERS& parameters) any_platform {
auto x19 = cell.template getFieldComponent<momenta::FixedVelocityMomentumGeneric::VELOCITY>(0);
auto x20 = cell.template getFieldComponent<momenta::FixedVelocityMomentumGeneric::VELOCITY>(1);
auto x21 = cell.template getFieldComponent<momenta::FixedVelocityMomentumGeneric::VELOCITY>(2);
auto x22 = parameters.template get<descriptors::OMEGA>();
auto x23 = x22 + V{-1};
auto x24 = V{0.5}*cell[12];
auto x25 = V{0.5}*cell[2];
auto x26 = V{2}*cell[9];
auto x27 = V{1} / (x20 + V{-1});
auto x28 = V{0.25}*cell[0] + V{0.25}*cell[10] + V{0.25}*cell[1] + V{0.5}*cell[9] + V{0.25};
auto x29 = V{1} / (x21 + V{1});
auto x30 = cell[0] + cell[10] + cell[1] + x26 + V{1};
auto x31 = cell[11] + V{2}*cell[12] + cell[13] + cell[14] + V{2}*cell[15] + V{2}*cell[17] + cell[2] + cell[4] + cell[5] + V{2}*cell[7] + x30;
auto x32 = cell[12] + V{2}*cell[14] + cell[15] + cell[16] + V{2}*cell[2] + cell[3] + V{2}*cell[4] + cell[6] + cell[7] + V{2}*cell[8] + x30;
auto x33 = -V{0.0138888888888889}*x27*x32 + V{0.0138888888888889}*x29*x31;
auto x34 = -x21;
auto x35 = x20 + x34;
auto x36 = -x35;
auto x37 = V{3}*x21;
auto x38 = -x37;
auto x39 = V{3}*x20;
auto x40 = x20*x20;
auto x41 = V{1.5}*x40;
auto x42 = x19*x19;
auto x43 = V{1.5}*x42;
auto x44 = x21*x21;
auto x45 = V{1.5}*x44;
auto x46 = x43 + x45 + V{-1};
auto x47 = x41 + x46;
auto x48 = x39 + x47;
auto x49 = x38 + x48;
auto x50 = x49 - V{4.5}*x36*x36;
auto x51 = x47*(-V{0.166666666666667}*x27*x32 + V{0.166666666666667}*x29*x31);
auto x52 = -V{0.25}*x27*x32 + V{0.25}*x29*x31;
auto x53 = -V{4.5}*x35*x35;
auto x54 = -x39 + x47;
auto x55 = x37 + x53 + x54;
auto x56 = x19 - x20;
auto x57 = -x56;
auto x58 = V{3}*x19;
auto x59 = x54 + x58;
auto x60 = x59 - V{4.5}*x57*x57;
auto x61 = -V{0.0277777777777778}*x27*x32 + V{0.0277777777777778}*x29*x31;
auto x62 = x19 + x34;
auto x63 = -x62;
auto x64 = x47 + x58;
auto x65 = x38 + x64;
auto x66 = x65 - V{4.5}*x63*x63;
auto x67 = -V{0.0277777777777778}*x27*x32 + V{0.0277777777777778}*x29*x31;
auto x68 = V{1.11022302462516e-16}*cell[2];
auto x69 = V{3}*x40;
auto x70 = V{1} - x45;
auto x71 = -x43;
auto x72 = x39 + x71;
auto x73 = x69 + x70 + x72;
auto x74 = x61*x73;
auto x75 = x19 + x20;
auto x76 = V{4.5}*(x75*x75);
auto x77 = x48 + x58 - x76;
auto x78 = -x33*x77;
auto x79 = -x41;
auto x80 = x70 + x79;
auto x81 = x58 + x80;
auto x82 = x72 + x76 + x81;
auto x83 = x33*x82;
auto x84 = -x58;
auto x85 = -V{4.5}*x56*x56;
auto x86 = x48 + x84 + x85;
auto x87 = -x33*x86;
auto x88 = x19 + x21;
auto x89 = V{4.5}*(x88*x88);
auto x90 = x37 + x71;
auto x91 = x81 + x89 + x90;
auto x92 = x20 + x21;
auto x93 = V{4.5}*(x92*x92);
auto x94 = x37 + x72 + x80 + x93;
auto x95 = -V{0.0555555555555556}*x27*x32 + V{0.0555555555555556}*x29*x31;
auto x96 = V{3}*x44;
auto x97 = x79 + x90 + x96 + V{1};
auto x98 = -V{1.11022302462516e-16}*x27*x32 + V{1.11022302462516e-16}*x29*x31;
auto x99 = x39 + x46 - x69;
auto x100 = x61*x99;
auto x101 = V{3}*x42;
auto x102 = x41 + V{-1};
auto x103 = -x101 + x102 + x45 + x58;
auto x104 = -x103*x61;
auto x105 = x101 + x81;
auto x106 = x105*x61;
auto x107 = V{1.11022302462516e-16}*cell[4];
auto x108 = V{5.55111512312578e-17}*cell[0] + V{5.55111512312578e-17}*cell[10] + V{5.55111512312578e-17}*cell[1] + V{1.11022302462516e-16}*cell[9] + V{5.55111512312578e-17};
auto x109 = V{1.66533453693773e-16}*cell[10] + V{2.22044604925031e-16}*cell[17] + V{1.66533453693773e-16}*cell[1] + V{2.22044604925031e-16}*cell[8] + x104 + x106 + x27*(V{5.55111512312578e-17}*cell[12] + V{1.11022302462516e-16}*cell[14] + V{5.55111512312578e-17}*cell[15] + V{5.55111512312578e-17}*cell[16] + V{5.55111512312578e-17}*cell[3] + V{5.55111512312578e-17}*cell[6] + V{5.55111512312578e-17}*cell[7] + V{1.11022302462516e-16}*cell[8] + x107 + x108 + x68) - x29*(V{5.55111512312578e-17}*cell[11] + V{1.11022302462516e-16}*cell[12] + V{5.55111512312578e-17}*cell[13] + V{5.55111512312578e-17}*cell[14] + V{1.11022302462516e-16}*cell[15] + V{1.11022302462516e-16}*cell[17] + V{5.55111512312578e-17}*cell[2] + V{5.55111512312578e-17}*cell[4] + V{5.55111512312578e-17}*cell[5] + V{1.11022302462516e-16}*cell[7] + x108) - x42*(-V{8.32667268468867e-17}*x27*x32 + V{8.32667268468867e-17}*x29*x31) - x51 + V{-2.22044604925031e-16};
auto x110 = V{1.11022302462516e-16}*cell[11] + V{2.22044604925031e-16}*cell[12] + V{4.44089209850063e-16}*cell[13] + V{4.9960036108132e-16}*cell[14] + V{3.33066907387547e-16}*cell[15] + V{3.33066907387547e-16}*cell[16] + V{2.22044604925031e-16}*cell[3] + V{4.44089209850063e-16}*cell[4] + V{4.9960036108132e-16}*cell[5] + V{3.33066907387547e-16}*cell[6] + V{3.33066907387547e-16}*cell[7] - x100 + x109 - x40*(-V{5.55111512312578e-17}*x27*x32 + V{5.55111512312578e-17}*x29*x31) - x44*x98 + x61*x91 + x61*x94 + x68 + x74 + x78 + x83 + x87 + x95*x97;
auto x111 = -V{0.0277777777777778}*x27*x32 + V{0.0277777777777778}*x29*x31;
auto x112 = x61*x97;
auto x113 = x37 + x64 - x89;
auto x114 = -x113*x33;
auto x115 = x33*x91;
auto x116 = -V{4.5}*x62*x62;
auto x117 = x116 + x37 + x47 + x84;
auto x118 = -x117*x33;
auto x119 = x102 + x37 + x43 - x96;
auto x120 = x119*x61;
auto x121 = x37 + x48 - x93;
auto x122 = V{2.22044604925031e-16}*cell[11] + V{9.71445146547012e-17}*cell[12] + V{1.11022302462516e-16}*cell[13] + V{3.33066907387547e-16}*cell[14] + V{4.71844785465692e-16}*cell[15] + V{5.27355936696949e-16}*cell[16] + V{2.22044604925031e-16}*cell[2] + V{9.71445146547012e-17}*cell[3] + V{3.33066907387547e-16}*cell[5] + V{4.71844785465692e-16}*cell[6] + V{5.27355936696949e-16}*cell[7] + V{4.44089209850063e-16}*cell[9] + x107 + x109 + x112 + x114 + x115 + x118 - x120 - x121*x61 - x40*x98 - x44*(-V{4.85722573273506e-17}*x27*x32 + V{4.85722573273506e-17}*x29*x31) - x55*(-V{3.08395284618099e-18}*x27*x32 + V{3.08395284618099e-18}*x29*x31) - x61*x77 - x61*x86 - x95*x99;
auto x123 = -x27*(-x111*x50 + x122 - x33*x66) + x29*(x110 - x33*x60 - x50*x67 - x61*x66);
auto x124 = -V{0.00231481481481481}*x27*x32 + V{0.00231481481481481}*x29*x31;
auto x125 = x49 + x53;
auto x126 = -V{0.0833333333333333}*x27*x32 + V{0.0833333333333333}*x29*x31;
auto x127 = V{0.0833333333333334}*cell[13];
auto x128 = V{0.0833333333333334}*cell[14];
auto x129 = V{0.0833333333333334}*cell[4];
auto x130 = V{0.0833333333333334}*cell[5];
auto x131 = V{0.0833333333333333}*cell[12];
auto x132 = V{0.0833333333333333}*cell[3];
auto x133 = V{3.46944695195361e-18}*cell[0] + V{3.46944695195361e-18}*cell[10] + V{3.46944695195361e-18}*cell[1] + V{6.93889390390723e-18}*cell[9] + V{3.46944695195361e-18};
auto x134 = x27*(V{3.46944695195361e-18}*cell[12] + V{6.93889390390723e-18}*cell[14] + V{3.46944695195361e-18}*cell[15] + V{3.46944695195361e-18}*cell[16] + V{6.93889390390723e-18}*cell[2] + V{3.46944695195361e-18}*cell[3] + V{6.93889390390723e-18}*cell[4] + V{3.46944695195361e-18}*cell[6] + V{3.46944695195361e-18}*cell[7] + V{6.93889390390723e-18}*cell[8] + x133);
auto x135 = x29*(V{3.46944695195361e-18}*cell[11] + V{6.93889390390723e-18}*cell[12] + V{3.46944695195361e-18}*cell[13] + V{3.46944695195361e-18}*cell[14] + V{6.93889390390723e-18}*cell[15] + V{6.93889390390723e-18}*cell[17] + V{3.46944695195361e-18}*cell[2] + V{3.46944695195361e-18}*cell[4] + V{3.46944695195361e-18}*cell[5] + V{6.93889390390723e-18}*cell[7] + x133);
auto x136 = -x135;
auto x137 = -V{0.0416666666666667}*x27*x32 + V{0.0416666666666667}*x29*x31;
auto x138 = x137*x44;
auto x139 = x127 + x128 + x129 + x130 - x131 - x132 + x134 + x136 + x138 + V{-0.0555555555555555};
auto x140 = V{0.0833333333333334}*cell[15];
auto x141 = V{0.0833333333333334}*cell[16];
auto x142 = V{0.0833333333333334}*cell[6];
auto x143 = V{0.0833333333333334}*cell[7];
auto x144 = V{0.0833333333333333}*cell[11];
auto x145 = V{0.0833333333333333}*cell[2];
auto x146 = x137*x40;
auto x147 = x140 + x141 + x142 + x143 - x144 - x145 + x146;
auto x148 = V{0.166666666666667}*cell[10] - V{0.166666666666667}*cell[17] + V{0.166666666666667}*cell[1] - V{0.166666666666667}*cell[8] - V{0.333333333333333}*cell[9] - x124*x125 + x124*x55 - x126*x42 + x139 + x147;
auto x149 = V{0.166666666666667}*cell[11];
auto x150 = V{0.166666666666667}*cell[2];
auto x151 = V{0.0833333333333334}*cell[17];
auto x152 = V{0.0833333333333334}*cell[8];
auto x153 = V{0.166666666666667}*cell[9];
auto x154 = -V{0.00115740740740741}*x27*x32 + V{0.00115740740740741}*x29*x31;
auto x155 = x154*x50;
auto x156 = x137*x42;
auto x157 = V{0.0833333333333333}*cell[10] + V{0.0833333333333333}*cell[1] - x134 + x135 - x151 - x152 - x153 + x154*x55 - x155 - x156 + V{0.0555555555555555};
auto x158 = V{0.166666666666667}*cell[12];
auto x159 = V{0.166666666666667}*cell[3];
auto x160 = -x27*x32 + x29*x31;
auto x161 = V{0.125}*x160*x19;
auto x162 = x161*x20;
auto x163 = -V{0.0208333333333333}*x27*x32 + V{0.0208333333333333}*x29*x31;
auto x164 = V{0.0208333333333333}*cell[0] + V{0.0208333333333333}*cell[10] + V{0.0208333333333333}*cell[1] + V{0.0416666666666667}*cell[9] + V{0.0208333333333333};
auto x165 = x27*(V{0.0208333333333333}*cell[12] + V{0.0416666666666667}*cell[14] + V{0.0208333333333333}*cell[15] + V{0.0208333333333333}*cell[16] + V{0.0416666666666667}*cell[2] + V{0.0208333333333333}*cell[3] + V{0.0416666666666667}*cell[4] + V{0.0208333333333333}*cell[6] + V{0.0208333333333333}*cell[7] + V{0.0416666666666667}*cell[8] + x164);
auto x166 = -x29*(V{0.0208333333333333}*cell[11] + V{0.0416666666666667}*cell[12] + V{0.0208333333333333}*cell[13] + V{0.0208333333333333}*cell[14] + V{0.0416666666666667}*cell[15] + V{0.0416666666666667}*cell[17] + V{0.0208333333333333}*cell[2] + V{0.0208333333333333}*cell[4] + V{0.0208333333333333}*cell[5] + V{0.0416666666666667}*cell[7] + x164);
auto x167 = -V{0.0416666666666667}*x27*x32 + V{0.0416666666666667}*x29*x31;
auto x168 = V{0.0833333333333333}*cell[11] + V{0.0416666666666667}*cell[15] + V{0.0416666666666667}*cell[16] + V{0.0833333333333333}*cell[2] + V{0.0416666666666667}*cell[6] + V{0.0416666666666667}*cell[7] + x165 + x166 - x167*x40 + V{0.0138888888888889};
auto x169 = -V{0.000578703703703704}*x27*x32 + V{0.000578703703703704}*x29*x31;
auto x170 = V{0.0833333333333333}*cell[10] + V{0.0416666666666667}*cell[17] + V{0.0833333333333333}*cell[1] + V{0.0416666666666667}*cell[8] + V{0.0833333333333334}*cell[9] + x125*x169 - x167*x42 - x169*x55;
auto x171 = -V{0.0416666666666667}*cell[12] - V{0.0416666666666667}*cell[3] + x163*x44 + x168 + x170;
auto x172 = V{0.416666666666667}*cell[13] - V{0.0833333333333333}*cell[14] + V{0.416666666666667}*cell[4] - V{0.0833333333333333}*cell[5] - x162 + x171;
auto x173 = -x33*(x59 + x85);
auto x174 = -V{0.0833333333333333}*cell[13] + V{0.416666666666667}*cell[14] - V{0.0833333333333333}*cell[4] + V{0.416666666666667}*cell[5] + x162 + x171;
auto x175 = x161*x21;
auto x176 = V{0.0833333333333333}*cell[12] + V{0.0416666666666667}*cell[13] + V{0.0416666666666667}*cell[14] + V{0.0833333333333333}*cell[3] + V{0.0416666666666667}*cell[4] + V{0.0416666666666667}*cell[5] - x167*x44;
auto x177 = -V{0.0416666666666667}*cell[11] - V{0.0416666666666667}*cell[2] + x163*x40 + x165 + x166 + x170 + x176 + V{0.0138888888888889};
auto x178 = V{0.416666666666667}*cell[15] - V{0.0833333333333333}*cell[16] + V{0.416666666666667}*cell[6] - V{0.0833333333333333}*cell[7] - x175 + x177;
auto x179 = x116 + x65;
auto x180 = -x179*x33;
auto x181 = -V{0.0833333333333333}*cell[15] + V{0.416666666666667}*cell[16] - V{0.0833333333333333}*cell[6] + V{0.416666666666667}*cell[7] + x175 + x177;
auto x182 = -V{0.00115740740740741}*x27*x32 + V{0.00115740740740741}*x29*x31;
auto x183 = V{0.125}*x160*x20*x21;
auto x184 = -V{0.0416666666666667}*cell[10] - V{0.0416666666666667}*cell[1] + x163*x42 + x168 + x176;
auto x185 = V{0.416666666666667}*cell[17] + V{0.416666666666667}*cell[8] - V{0.166666666666667}*cell[9] - x125*x182 + x182*x55 - x183 + x184;
auto x186 = -V{0.00578703703703704}*x27*x32 + V{0.00578703703703704}*x29*x31;
auto x187 = -V{0.0833333333333333}*cell[17] - V{0.0833333333333333}*cell[8] + V{0.833333333333333}*cell[9] + x183 + x184;
auto x188 = -x27*(-x111*x125 + x122 + x180) + x29*(x110 - x125*x67 + x173 - x179*x61);
auto x189 = -V{0.0833333333333333}*cell[10] - V{0.0833333333333333}*cell[1] + x151 + x152 + x153 + x155 + x156 - V{0.00115740740740741}*x160*x55;
auto x0 = -x22*(V{0.166666666666667}*x123*x47 + V{0.333333333333333}) + x23*(V{0.5}*cell[10] + V{0.5}*cell[11] + V{1}*cell[13] + V{1}*cell[14] + V{1}*cell[15] + V{1}*cell[16] + V{1}*cell[17] + V{0.5}*cell[1] + V{0.5}*cell[3] + V{1}*cell[4] + V{1}*cell[5] + V{1}*cell[6] + V{1}*cell[7] + V{1}*cell[8] + x24 + x25 + x26 + x27*(V{0.25}*cell[12] + V{0.5}*cell[14] + V{0.25}*cell[15] + V{0.25}*cell[16] + V{0.25}*cell[3] + V{0.5}*cell[4] + V{0.25}*cell[6] + V{0.25}*cell[7] + V{0.5}*cell[8] + x25 + x28) - x29*(V{0.25}*cell[11] + V{0.25}*cell[13] + V{0.25}*cell[14] + V{0.5}*cell[15] + V{0.5}*cell[17] + V{0.25}*cell[2] + V{0.25}*cell[4] + V{0.25}*cell[5] + V{0.5}*cell[7] + x24 + x28) + x33*x50 - x33*x55 - x40*x52 - x42*x52 - x44*x52 + x51 + V{0.833333333333333});
auto x1 = -x22*(V{0.0277777777777778}*x103*x123 + V{0.0555555555555556}) - x23*(x104 + x148);
auto x2 = -x22*(V{0.0277777777777778}*x123*x99 + V{0.0555555555555556}) + x23*(V{0.166666666666667}*cell[15] + V{0.166666666666667}*cell[16] + V{0.166666666666667}*cell[6] + V{0.166666666666667}*cell[7] + x100 + x126*x40 - x127 - x128 - x129 - x130 + x131 + x132 - x138 - x149 - x150 + x157);
auto x3 = -x22*(V{0.0277777777777778}*x119*x123 + V{0.0555555555555556}) + x23*(V{0.166666666666667}*cell[13] + V{0.166666666666667}*cell[14] + V{0.166666666666667}*cell[4] + V{0.166666666666667}*cell[5] + x120 + x126*x44 - x140 - x141 - x142 - x143 + x144 + x145 - x146 + x157 - x158 - x159);
auto x4 = -x22*(V{0.0138888888888889}*x123*x77 + V{0.0277777777777778}) - x23*(x172 + x78);
auto x5 = -x22*(V{0.0138888888888889}*x123*x60 + V{0.0277777777777778}) - x23*(x173 + x174);
auto x6 = -x22*(V{0.0138888888888889}*x113*x123 + V{0.0277777777777778}) - x23*(x114 + x178);
auto x7 = -x22*(V{0.0138888888888889}*x123*x66 + V{0.0277777777777778}) - x23*(x180 + x181);
auto x8 = -x22*(V{0.0138888888888889}*x121*x123 + V{0.0277777777777778}) - x23*(-x121*x33 + x185);
auto x9 = -x22*(V{0.0138888888888889}*x123*x50 + V{0.0277777777777778}) - x23*(-x125*(-V{0.00810185185185185}*x27*x32 + V{0.00810185185185185}*x29*x31) - x186*x55 + x187);
auto x10 = x22*(V{0.0277777777777778}*x105*x188 + V{-0.0555555555555556}) - x23*(x106 + x148);
auto x11 = x22*(V{0.0277777777777778}*x188*x73 + V{-0.0555555555555556}) + x23*(V{0.166666666666667}*cell[15] + V{0.166666666666667}*cell[16] + V{0.166666666666667}*cell[6] + V{0.166666666666667}*cell[7] - x139 - x149 - x150 + V{0.0833333333333333}*x160*x40 - x189 - x74);
auto x12 = x22*(V{0.0277777777777778}*x188*x97 + V{-0.0555555555555556}) + x23*(V{0.166666666666667}*cell[13] + V{0.166666666666667}*cell[14] + V{0.166666666666667}*cell[4] + V{0.166666666666667}*cell[5] - x112 - x134 - x136 - x147 - x158 - x159 + V{0.0833333333333333}*x160*x44 - x189 + V{0.0555555555555555});
auto x13 = x22*(V{0.0138888888888889}*x188*x82 + V{-0.0277777777777778}) - x23*(x172 + x83);
auto x14 = -x22*(V{0.0138888888888889}*x123*x86 + V{0.0277777777777778}) - x23*(x174 + x87);
auto x15 = x22*(V{0.0138888888888889}*x188*x91 + V{-0.0277777777777778}) - x23*(x115 + x178);
auto x16 = -x22*(V{0.0138888888888889}*x117*x123 + V{0.0277777777777778}) - x23*(x118 + x181);
auto x17 = x22*(V{0.0138888888888889}*x188*x94 + V{-0.0277777777777778}) - x23*(x185 + x33*x94);
auto x18 = -x22*(V{0.0138888888888889}*x123*x55 + V{0.0277777777777778}) - x23*(x125*x186 + x187 - x55*(-V{0.0196759259259259}*x27*x32 + V{0.0196759259259259}*x29*x31));
cell[0] = x0;
cell[1] = x1;
cell[2] = x2;
cell[3] = x3;
cell[4] = x4;
cell[5] = x5;
cell[6] = x6;
cell[7] = x7;
cell[8] = x8;
cell[9] = x9;
cell[10] = x10;
cell[11] = x11;
cell[12] = x12;
cell[13] = x13;
cell[14] = x14;
cell[15] = x15;
cell[16] = x16;
cell[17] = x17;
cell[18] = x18;
return { V{0.5}*x188, x40 + x42 + x44 };
}
};

}

}
