/*  This file is part of the OpenLB library
 *
 *  Copyright (C) 2021-24 Adrian Kummerlaender, Shota Ito
 *  E-mail contact: info@openlb.net
 *  The most recent release of OpenLB can be downloaded at
 *  <http://www.openlb.net/>
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public
 *  License along with this program; if not, write to the Free
 *  Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA  02110-1301, USA.
*/

/*  ========================================================
 *  ==  WARNING: This is an automatically generated file, ==
 *  ==                  do not modify.                    ==
 *  ========================================================
 */

#pragma once


namespace olb {

namespace dynamics {

template <typename T, typename... FIELDS>
struct CSE<CombinedRLBdynamics<T, descriptors::D3Q19<FIELDS...>, dynamics::Tuple<T, descriptors::D3Q19<FIELDS...>, momenta::Tuple<momenta::BulkDensity, momenta::BulkMomentum, momenta::BulkStress, momenta::DefineToNEq>, equilibria::SecondOrder, collision::BGK, dynamics::DefaultCombination>, momenta::Tuple<momenta::InnerCornerDensity3D<1, -1, -1>, momenta::FixedVelocityMomentumGeneric, momenta::InnerCornerStress3D<1, -1, -1>, momenta::DefineSeparately> >> {
template <concepts::Cell CELL, concepts::Parameters PARAMETERS, concepts::BaseType V=typename CELL::value_t>
CellStatistic<V> collide(CELL& cell, PARAMETERS& parameters) any_platform {
auto x22 = parameters.template get<descriptors::OMEGA>();
auto x19 = cell.template getFieldComponent<momenta::FixedVelocityMomentumGeneric::VELOCITY>(0);
auto x20 = cell.template getFieldComponent<momenta::FixedVelocityMomentumGeneric::VELOCITY>(1);
auto x21 = cell.template getFieldComponent<momenta::FixedVelocityMomentumGeneric::VELOCITY>(2);
auto x23 = x22 + V{-1};
auto x24 = V{1} / (x20 + V{-1});
auto x25 = V{0.166666666666667}*cell[0];
auto x26 = V{0.166666666666667}*cell[10] + V{0.166666666666667}*cell[1] + V{0.333333333333333}*cell[8] + x25 + V{0.166666666666667};
auto x27 = V{0.166666666666667}*cell[12] + V{0.333333333333333}*cell[14] + V{0.166666666666667}*cell[3];
auto x28 = V{1} / (x21 + V{-1});
auto x29 = V{0.166666666666667}*cell[11] + V{0.333333333333333}*cell[16] + V{0.166666666666667}*cell[2];
auto x30 = V{1} / (x19 + V{1});
auto x31 = V{0.166666666666667}*cell[17];
auto x32 = V{0.166666666666667}*cell[18];
auto x33 = V{0.166666666666667}*cell[8];
auto x34 = V{0.166666666666667}*cell[9];
auto x35 = cell[0] + cell[12] + V{2}*cell[14] + cell[3] + V{1};
auto x36 = cell[11] + V{2}*cell[16] + cell[2];
auto x37 = V{2}*cell[10] + V{2}*cell[13] + V{2}*cell[15] + cell[17] + cell[18] + cell[8] + cell[9] + x35 + x36;
auto x38 = cell[10] + cell[1] + V{2}*cell[8];
auto x39 = cell[15] + cell[16] + V{2}*cell[2] + V{2}*cell[4] + cell[6] + cell[7] + V{2}*cell[9] + x35 + x38;
auto x40 = cell[0] + cell[13] + cell[14] + V{2}*cell[18] + V{2}*cell[3] + cell[4] + cell[5] + V{2}*cell[6] + x36 + x38 + V{1};
auto x41 = x21*x21;
auto x42 = V{1.5}*x41;
auto x43 = x19*x19;
auto x44 = V{1.5}*x43;
auto x45 = x20*x20;
auto x46 = V{1.5}*x45;
auto x47 = x44 + x46 + V{-1};
auto x48 = x42 + x47;
auto x49 = x48*(-V{0.111111111111111}*x24*x39 - V{0.111111111111111}*x28*x40 + V{0.111111111111111}*x30*x37);
auto x50 = -V{0.166666666666667}*x24*x39 - V{0.166666666666667}*x28*x40 + V{0.166666666666667}*x30*x37;
auto x51 = V{1.11022302462516e-16}*cell[4];
auto x52 = V{1.11022302462516e-16}*cell[13];
auto x53 = V{1.11022302462516e-16}*cell[2];
auto x54 = V{5.55111512312578e-17}*cell[0];
auto x55 = V{5.55111512312578e-17}*cell[10] + V{5.55111512312578e-17}*cell[1] + V{1.11022302462516e-16}*cell[8] + x54 + V{5.55111512312578e-17};
auto x56 = V{5.55111512312578e-17}*cell[12] + V{1.11022302462516e-16}*cell[14] + V{5.55111512312578e-17}*cell[3];
auto x57 = x24*(V{5.55111512312578e-17}*cell[15] + V{5.55111512312578e-17}*cell[16] + V{5.55111512312578e-17}*cell[6] + V{5.55111512312578e-17}*cell[7] + V{1.11022302462516e-16}*cell[9] + x51 + x53 + x55 + x56);
auto x58 = V{1.11022302462516e-16}*cell[3];
auto x59 = V{5.55111512312578e-17}*cell[11] + V{1.11022302462516e-16}*cell[16] + V{5.55111512312578e-17}*cell[2];
auto x60 = x28*(V{5.55111512312578e-17}*cell[13] + V{5.55111512312578e-17}*cell[14] + V{1.11022302462516e-16}*cell[18] + V{5.55111512312578e-17}*cell[4] + V{5.55111512312578e-17}*cell[5] + V{1.11022302462516e-16}*cell[6] + x55 + x58 + x59);
auto x61 = -x30*(V{1.11022302462516e-16}*cell[10] + V{1.11022302462516e-16}*cell[15] + V{5.55111512312578e-17}*cell[17] + V{5.55111512312578e-17}*cell[18] + V{5.55111512312578e-17}*cell[8] + V{5.55111512312578e-17}*cell[9] + x52 + x54 + x56 + x59 + V{5.55111512312578e-17});
auto x62 = -x49;
auto x63 = -V{0.00925925925925926}*x24*x39 - V{0.00925925925925926}*x28*x40 + V{0.00925925925925926}*x30*x37;
auto x64 = V{3}*x19;
auto x65 = x19 + x21;
auto x66 = V{4.5}*(x65*x65);
auto x67 = -x42;
auto x68 = V{1} - x44;
auto x69 = x67 + x68;
auto x70 = V{3}*x21;
auto x71 = -x46;
auto x72 = x70 + x71;
auto x73 = x64 + x66 + x69 + x72;
auto x74 = x48 + x70;
auto x75 = x64 - x66 + x74;
auto x76 = -x21;
auto x77 = x19 + x76;
auto x78 = -x77;
auto x79 = -x70;
auto x80 = x48 + x64;
auto x81 = x79 + x80;
auto x82 = x81 - V{4.5}*x78*x78;
auto x83 = -x64;
auto x84 = -V{4.5}*x77*x77;
auto x85 = x74 + x83 + x84;
auto x86 = -V{0.0185185185185185}*x24*x39 - V{0.0185185185185185}*x28*x40 + V{0.0185185185185185}*x30*x37;
auto x87 = x19 + x20;
auto x88 = V{4.5}*(x87*x87);
auto x89 = V{3}*x20;
auto x90 = x48 + x89;
auto x91 = x64 - x88 + x90;
auto x92 = x20 + x76;
auto x93 = -x92;
auto x94 = x79 + x90;
auto x95 = x94 - V{4.5}*x93*x93;
auto x96 = -V{0.037037037037037}*x24*x39 - V{0.037037037037037}*x28*x40 + V{0.037037037037037}*x30*x37;
auto x97 = V{3}*x45;
auto x98 = x42 + V{-1};
auto x99 = x44 + x89 - x97 + x98;
auto x100 = -V{7.40148683083438e-17}*x24*x39 - V{7.40148683083438e-17}*x28*x40 + V{7.40148683083438e-17}*x30*x37;
auto x101 = V{3}*x43;
auto x102 = x64 + x71;
auto x103 = x101 + x102 + x67 + V{1};
auto x104 = -V{5.55111512312578e-17}*x24*x39 - V{5.55111512312578e-17}*x28*x40 + V{5.55111512312578e-17}*x30*x37;
auto x105 = -x101 + x46 + x64 + x98;
auto x106 = x20 + x21;
auto x107 = V{4.5}*(x106*x106);
auto x108 = -x107 + x70 + x90;
auto x109 = V{1.66533453693773e-16}*cell[10] + V{2.22044604925031e-16}*cell[18] + V{1.66533453693773e-16}*cell[1] + V{2.22044604925031e-16}*cell[9] + x103*x86 - x104*x43 - x105*x86 - x108*x86;
auto x110 = V{3}*x41;
auto x111 = -x110 + x47 + x70;
auto x112 = -x111*x86;
auto x113 = x110 + x68 + x72;
auto x114 = x113*x86;
auto x115 = x19 - x20;
auto x116 = -V{4.5}*x115*x115;
auto x117 = x116 + x83 + x90;
auto x118 = V{3.33066907387547e-16}*cell[14] + V{3.33066907387547e-16}*cell[5] + x112 + x114 - x117*x86;
auto x119 = x69 + x89;
auto x120 = x102 + x119 + x88;
auto x121 = -x115;
auto x122 = -x89;
auto x123 = x122 + x80;
auto x124 = x123 - V{4.5}*x121*x121;
auto x125 = -V{4.5}*x92*x92;
auto x126 = x122 + x125 + x74;
auto x127 = -V{3.70074341541719e-17}*x24*x39 - V{3.70074341541719e-17}*x28*x40 + V{3.70074341541719e-17}*x30*x37;
auto x128 = -x86*x99;
auto x129 = x119 + x97;
auto x130 = x129*x86;
auto x131 = x128 + x130 + x57 + x60 + x61 + x62 - x85*x86 + V{-2.22044604925031e-16};
auto x132 = x107 + x119 + x72;
auto x133 = x24*(V{2.22044604925031e-16}*cell[11] + V{9.71445146547012e-17}*cell[12] + V{4.71844785465692e-16}*cell[15] + V{5.27355936696949e-16}*cell[16] + V{2.22044604925031e-16}*cell[17] + V{2.22044604925031e-16}*cell[2] + V{9.71445146547012e-17}*cell[3] + V{4.71844785465692e-16}*cell[6] + V{5.27355936696949e-16}*cell[7] + V{2.22044604925031e-16}*cell[8] - x100*x45 + x109 + x118 - x41*(-V{3.23815048849004e-17}*x24*x39 - V{3.23815048849004e-17}*x28*x40 + V{3.23815048849004e-17}*x30*x37) + x51 + x52 + x57 + x60 + x61 + x62 + x63*x73 - x63*x75 - x63*x82 - x63*x85 - x86*x91 - x86*x95 - x96*x99 + V{-2.22044604925031e-16}) + x28*(V{1.11022302462516e-16}*cell[11] + V{2.22044604925031e-16}*cell[12] + V{4.71844785465692e-16}*cell[13] + V{5.27355936696949e-16}*cell[14] + V{3.33066907387547e-16}*cell[15] + V{3.33066907387547e-16}*cell[16] + V{2.22044604925031e-16}*cell[3] + V{4.71844785465692e-16}*cell[4] + V{5.27355936696949e-16}*cell[5] + V{3.33066907387547e-16}*cell[6] + V{3.33066907387547e-16}*cell[7] - x100*x41 + x109 - x111*x96 - x117*x63 + x120*x63 - x124*x63 - x126*x86 - x127*x45 + x131 + x53 - x63*x91 - x75*x86) - x30*(V{2.22044604925031e-16}*cell[10] + V{1.66533453693773e-16}*cell[11] + V{1.11022302462516e-16}*cell[12] + V{3.33066907387547e-16}*cell[13] + V{4.44089209850063e-16}*cell[15] + V{2.22044604925031e-16}*cell[16] + V{4.71844785465692e-16}*cell[17] + V{5.27355936696949e-16}*cell[18] + V{2.22044604925031e-16}*cell[1] + V{1.66533453693773e-16}*cell[2] + V{3.33066907387547e-16}*cell[4] + V{4.44089209850063e-16}*cell[6] + V{2.22044604925031e-16}*cell[7] + V{4.71844785465692e-16}*cell[8] + V{5.27355936696949e-16}*cell[9] - x100*x43 + x103*x96 - x104*x45 - x108*x63 + x118 + x120*x86 - x126*x63 - x127*x41 + x131 + x132*x63 + x58 - x63*x95 + x73*x86);
auto x134 = -x133;
auto x135 = V{0.0185185185185185}*x24*x39 + V{0.0185185185185185}*x28*x40 - V{0.0185185185185185}*x30*x37;
auto x136 = V{0.0277777777777778}*x24*x39 + V{0.0277777777777778}*x28*x40 - V{0.0277777777777778}*x30*x37;
auto x137 = V{3.46944695195361e-18}*cell[0];
auto x138 = V{3.46944695195361e-18}*cell[10] + V{3.46944695195361e-18}*cell[1] + V{6.93889390390723e-18}*cell[8] + x137 + V{3.46944695195361e-18};
auto x139 = V{3.46944695195361e-18}*cell[12] + V{6.93889390390723e-18}*cell[14] + V{3.46944695195361e-18}*cell[3];
auto x140 = x24*(V{3.46944695195361e-18}*cell[15] + V{3.46944695195361e-18}*cell[16] + V{6.93889390390723e-18}*cell[2] + V{6.93889390390723e-18}*cell[4] + V{3.46944695195361e-18}*cell[6] + V{3.46944695195361e-18}*cell[7] + V{6.93889390390723e-18}*cell[9] + x138 + x139);
auto x141 = V{3.46944695195361e-18}*cell[11] + V{6.93889390390723e-18}*cell[16] + V{3.46944695195361e-18}*cell[2];
auto x142 = x28*(V{3.46944695195361e-18}*cell[13] + V{3.46944695195361e-18}*cell[14] + V{6.93889390390723e-18}*cell[18] + V{6.93889390390723e-18}*cell[3] + V{3.46944695195361e-18}*cell[4] + V{3.46944695195361e-18}*cell[5] + V{6.93889390390723e-18}*cell[6] + x138 + x141);
auto x143 = -x30*(V{6.93889390390723e-18}*cell[10] + V{6.93889390390723e-18}*cell[13] + V{6.93889390390723e-18}*cell[15] + V{3.46944695195361e-18}*cell[17] + V{3.46944695195361e-18}*cell[18] + V{3.46944695195361e-18}*cell[8] + V{3.46944695195361e-18}*cell[9] + x137 + x139 + x141 + V{3.46944695195361e-18});
auto x144 = -V{0.0833333333333333}*cell[12] + V{0.0833333333333334}*cell[13] + V{0.0833333333333334}*cell[14] - V{0.0833333333333333}*cell[3] + V{0.0833333333333334}*cell[4] + V{0.0833333333333334}*cell[5] + x140 + x142 + x143 + V{-0.0555555555555555};
auto x145 = -V{0.0833333333333333}*cell[11] + V{0.0833333333333334}*cell[15] + V{0.0833333333333334}*cell[16] - V{0.0833333333333333}*cell[2] + V{0.0833333333333334}*cell[6] + V{0.0833333333333334}*cell[7];
auto x146 = V{0.166666666666667}*cell[10] + V{0.166666666666667}*cell[1] - x136*x41 - x136*x45 + x144 + x145 - x31 - x32 - x33 - x34 + x43*(V{0.0555555555555556}*x24*x39 + V{0.0555555555555556}*x28*x40 - V{0.0555555555555556}*x30*x37);
auto x147 = -V{0.0277777777777778}*x24*x39 - V{0.0277777777777778}*x28*x40 + V{0.0277777777777778}*x30*x37;
auto x148 = x24*x39 + x28*x40 - x30*x37;
auto x149 = -x148;
auto x150 = -V{0.0833333333333333}*cell[10] + V{0.0833333333333334}*cell[17] + V{0.0833333333333334}*cell[18] - V{0.0833333333333333}*cell[1] + V{0.0833333333333334}*cell[8] + V{0.0833333333333334}*cell[9] + x147*x43;
auto x151 = V{0.166666666666667}*cell[11] - V{0.166666666666667}*cell[15] - V{0.166666666666667}*cell[16] + V{0.166666666666667}*cell[2] - V{0.166666666666667}*cell[6] - V{0.166666666666667}*cell[7] + x144 + x147*x41 - V{0.0555555555555556}*x149*x45 + x150;
auto x152 = V{0.166666666666667}*cell[12] - V{0.166666666666667}*cell[13] - V{0.166666666666667}*cell[14] + V{0.166666666666667}*cell[3] - V{0.166666666666667}*cell[4] - V{0.166666666666667}*cell[5] + x140 + x142 + x143 + x145 + x147*x45 - V{0.0555555555555556}*x149*x41 + x150 + V{-0.0555555555555555};
auto x153 = V{0.00925925925925926}*x24*x39 + V{0.00925925925925926}*x28*x40 - V{0.00925925925925926}*x30*x37;
auto x154 = V{0.0833333333333333}*x148*x19;
auto x155 = x154*x20;
auto x156 = V{0.0138888888888889}*x24*x39 + V{0.0138888888888889}*x28*x40 - V{0.0138888888888889}*x30*x37;
auto x157 = V{0.0138888888888889}*cell[0];
auto x158 = V{0.0138888888888889}*cell[10] + V{0.0138888888888889}*cell[1] + V{0.0277777777777778}*cell[8] + x157 + V{0.0138888888888889};
auto x159 = V{0.0138888888888889}*cell[12] + V{0.0277777777777778}*cell[14] + V{0.0138888888888889}*cell[3];
auto x160 = x24*(V{0.0138888888888889}*cell[15] + V{0.0138888888888889}*cell[16] + V{0.0277777777777778}*cell[2] + V{0.0277777777777778}*cell[4] + V{0.0138888888888889}*cell[6] + V{0.0138888888888889}*cell[7] + V{0.0277777777777778}*cell[9] + x158 + x159);
auto x161 = V{0.0138888888888889}*cell[11] + V{0.0277777777777778}*cell[16] + V{0.0138888888888889}*cell[2];
auto x162 = x28*(V{0.0138888888888889}*cell[13] + V{0.0138888888888889}*cell[14] + V{0.0277777777777778}*cell[18] + V{0.0277777777777778}*cell[3] + V{0.0138888888888889}*cell[4] + V{0.0138888888888889}*cell[5] + V{0.0277777777777778}*cell[6] + x158 + x161);
auto x163 = -x30*(V{0.0277777777777778}*cell[10] + V{0.0277777777777778}*cell[13] + V{0.0277777777777778}*cell[15] + V{0.0138888888888889}*cell[17] + V{0.0138888888888889}*cell[18] + V{0.0138888888888889}*cell[8] + V{0.0138888888888889}*cell[9] + x157 + x159 + x161 + V{0.0138888888888889});
auto x164 = V{0.0277777777777778}*x24*x39 + V{0.0277777777777778}*x28*x40 - V{0.0277777777777778}*x30*x37;
auto x165 = V{0.0833333333333333}*cell[10] + V{0.0416666666666667}*cell[17] + V{0.0416666666666667}*cell[18] + V{0.0833333333333333}*cell[1] + V{0.0416666666666667}*cell[8] + V{0.0416666666666667}*cell[9] + x160 + x162 + x163 + x164*x43 + V{0.0138888888888889};
auto x166 = V{0.0833333333333333}*cell[11] + V{0.0416666666666667}*cell[15] + V{0.0416666666666667}*cell[16] + V{0.0833333333333333}*cell[2] + V{0.0416666666666667}*cell[6] + V{0.0416666666666667}*cell[7] + x164*x45;
auto x167 = -V{0.0416666666666667}*cell[12] - V{0.0416666666666667}*cell[3] - x156*x41 + x165 + x166;
auto x168 = V{0.416666666666667}*cell[13] - V{0.0833333333333333}*cell[14] + V{0.416666666666667}*cell[4] - V{0.0833333333333333}*cell[5] + x155 + x167;
auto x169 = -V{0.0833333333333333}*cell[13] + V{0.416666666666667}*cell[14] - V{0.0833333333333333}*cell[4] + V{0.416666666666667}*cell[5] - x155 + x167;
auto x170 = x154*x21;
auto x171 = V{0.0833333333333333}*cell[12] + V{0.0416666666666667}*cell[13] + V{0.0416666666666667}*cell[14] + V{0.0833333333333333}*cell[3] + V{0.0416666666666667}*cell[4] + V{0.0416666666666667}*cell[5] + x164*x41;
auto x172 = -V{0.0416666666666667}*cell[11] - V{0.0416666666666667}*cell[2] - x156*x45 + x165 + x171;
auto x173 = V{0.416666666666667}*cell[15] - V{0.0833333333333333}*cell[16] + V{0.416666666666667}*cell[6] - V{0.0833333333333333}*cell[7] + x170 + x172;
auto x174 = -V{0.0833333333333333}*cell[15] + V{0.416666666666667}*cell[16] - V{0.0833333333333333}*cell[6] + V{0.416666666666667}*cell[7] - x170 + x172;
auto x175 = V{0.0833333333333333}*x148*x20*x21;
auto x176 = -V{0.0416666666666667}*cell[10] - V{0.0416666666666667}*cell[1] - x156*x43 + x160 + x162 + x163 + x166 + x171 + V{0.0138888888888889};
auto x177 = V{0.416666666666667}*cell[17] - V{0.0833333333333333}*cell[18] + V{0.416666666666667}*cell[8] - V{0.0833333333333333}*cell[9] + x175 + x176;
auto x178 = -V{0.0833333333333333}*cell[17] + V{0.416666666666667}*cell[18] - V{0.0833333333333333}*cell[8] + V{0.416666666666667}*cell[9] - x175 + x176;
auto x0 = -x22*(V{0.111111111111111}*x134*x48 + V{0.333333333333333}) + x23*(V{0.5}*cell[10] + V{0.5}*cell[11] + V{0.5}*cell[12] + V{1}*cell[13] + V{1}*cell[14] + V{1}*cell[15] + V{1}*cell[16] + V{1}*cell[17] + V{1}*cell[18] + V{0.5}*cell[1] + V{0.5}*cell[2] + V{0.5}*cell[3] + V{1}*cell[4] + V{1}*cell[5] + V{1}*cell[6] + V{1}*cell[7] + V{1}*cell[8] + V{1}*cell[9] + x24*(V{0.166666666666667}*cell[15] + V{0.166666666666667}*cell[16] + V{0.333333333333333}*cell[2] + V{0.333333333333333}*cell[4] + V{0.166666666666667}*cell[6] + V{0.166666666666667}*cell[7] + V{0.333333333333333}*cell[9] + x26 + x27) + x28*(V{0.166666666666667}*cell[13] + V{0.166666666666667}*cell[14] + V{0.333333333333333}*cell[18] + V{0.333333333333333}*cell[3] + V{0.166666666666667}*cell[4] + V{0.166666666666667}*cell[5] + V{0.333333333333333}*cell[6] + x26 + x29) - x30*(V{0.333333333333333}*cell[10] + V{0.333333333333333}*cell[13] + V{0.333333333333333}*cell[15] + x25 + x27 + x29 + x31 + x32 + x33 + x34 + V{0.166666666666667}) - x41*x50 - x43*x50 - x45*x50 + x49 + V{0.833333333333333});
auto x1 = -x22*(V{0.0185185185185185}*x105*x134 + V{0.0555555555555556}) - x23*(x105*x135 + x146);
auto x2 = -x22*(V{0.0185185185185185}*x134*x99 + V{0.0555555555555556}) + x23*(-x128 - x151);
auto x3 = -x22*(V{0.0185185185185185}*x111*x134 + V{0.0555555555555556}) + x23*(-x112 - x152);
auto x4 = -x22*(V{0.00925925925925926}*x134*x91 + V{0.0277777777777778}) - x23*(x153*x91 + x168);
auto x5 = -x22*(V{0.00925925925925926}*x124*x134 + V{0.0277777777777778}) - x23*(x153*(x116 + x123) + x169);
auto x6 = -x22*(V{0.00925925925925926}*x134*x75 + V{0.0277777777777778}) - x23*(x153*x75 + x173);
auto x7 = -x22*(V{0.00925925925925926}*x134*x82 + V{0.0277777777777778}) - x23*(x153*(x81 + x84) + x174);
auto x8 = -x22*(V{0.00925925925925926}*x108*x134 + V{0.0277777777777778}) - x23*(x108*x153 + x177);
auto x9 = -x22*(V{0.00925925925925926}*x134*x95 + V{0.0277777777777778}) - x23*(x153*(x125 + x94) + x178);
auto x10 = -x22*(V{0.0185185185185185}*x103*x133 + V{0.0555555555555556}) - x23*(-x103*x135 + x146);
auto x11 = -x22*(V{0.0185185185185185}*x129*x133 + V{0.0555555555555556}) + x23*(-x130 - x151);
auto x12 = -x22*(V{0.0185185185185185}*x113*x133 + V{0.0555555555555556}) + x23*(-x114 - x152);
auto x13 = -x22*(V{0.00925925925925926}*x120*x133 + V{0.0277777777777778}) - x23*(-x120*x153 + x168);
auto x14 = -x22*(V{0.00925925925925926}*x117*x134 + V{0.0277777777777778}) - x23*(x117*x153 + x169);
auto x15 = -x22*(V{0.00925925925925926}*x133*x73 + V{0.0277777777777778}) - x23*(-x153*x73 + x173);
auto x16 = -x22*(V{0.00925925925925926}*x134*x85 + V{0.0277777777777778}) - x23*(x153*x85 + x174);
auto x17 = -x22*(V{0.00925925925925926}*x132*x133 + V{0.0277777777777778}) - x23*(-x132*x153 + x177);
auto x18 = -x22*(V{0.00925925925925926}*x126*x134 + V{0.0277777777777778}) - x23*(x126*x153 + x178);
cell[0] = x0;
cell[1] = x1;
cell[2] = x2;
cell[3] = x3;
cell[4] = x4;
cell[5] = x5;
cell[6] = x6;
cell[7] = x7;
cell[8] = x8;
cell[9] = x9;
cell[10] = x10;
cell[11] = x11;
cell[12] = x12;
cell[13] = x13;
cell[14] = x14;
cell[15] = x15;
cell[16] = x16;
cell[17] = x17;
cell[18] = x18;
return { V{0.333333333333333}*x134, x41 + x43 + x45 };
}
};

}

}
