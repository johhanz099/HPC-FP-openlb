/*  This file is part of the OpenLB library
 *
 *  Copyright (C) 2021-24 Adrian Kummerlaender, Shota Ito
 *  E-mail contact: info@openlb.net
 *  The most recent release of OpenLB can be downloaded at
 *  <http://www.openlb.net/>
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public
 *  License along with this program; if not, write to the Free
 *  Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA  02110-1301, USA.
*/

/*  ========================================================
 *  ==  WARNING: This is an automatically generated file, ==
 *  ==                  do not modify.                    ==
 *  ========================================================
 */

#pragma once


namespace olb {

namespace dynamics {

template <typename T, typename... FIELDS>
struct CSE<CombinedRLBdynamics<T, descriptors::D3Q19<FIELDS...>, dynamics::Tuple<T, descriptors::D3Q19<FIELDS...>, momenta::Tuple<momenta::BulkDensity, momenta::BulkMomentum, momenta::BulkStress, momenta::DefineToNEq>, equilibria::SecondOrder, collision::BGK, dynamics::DefaultCombination>, momenta::Tuple<momenta::InnerCornerDensity3D<-1, 1, -1>, momenta::FixedVelocityMomentumGeneric, momenta::InnerCornerStress3D<-1, 1, -1>, momenta::DefineSeparately> >> {
template <concepts::Cell CELL, concepts::Parameters PARAMETERS, concepts::BaseType V=typename CELL::value_t>
CellStatistic<V> collide(CELL& cell, PARAMETERS& parameters) any_platform {
auto x19 = cell.template getFieldComponent<momenta::FixedVelocityMomentumGeneric::VELOCITY>(0);
auto x20 = cell.template getFieldComponent<momenta::FixedVelocityMomentumGeneric::VELOCITY>(1);
auto x22 = parameters.template get<descriptors::OMEGA>();
auto x21 = cell.template getFieldComponent<momenta::FixedVelocityMomentumGeneric::VELOCITY>(2);
auto x23 = x22 + V{-1};
auto x24 = V{1} / (x19 + V{-1});
auto x25 = V{0.166666666666667}*cell[17];
auto x26 = V{0.166666666666667}*cell[18];
auto x27 = V{0.166666666666667}*cell[8];
auto x28 = V{0.166666666666667}*cell[9];
auto x29 = V{0.166666666666667}*cell[0];
auto x30 = V{0.166666666666667}*cell[11] + V{0.166666666666667}*cell[2] + V{0.333333333333333}*cell[6] + x29 + V{0.166666666666667};
auto x31 = V{0.166666666666667}*cell[12] + V{0.166666666666667}*cell[3] + V{0.333333333333333}*cell[5];
auto x32 = V{1} / (x21 + V{-1});
auto x33 = V{0.166666666666667}*cell[10] + V{0.333333333333333}*cell[18] + V{0.166666666666667}*cell[1];
auto x34 = V{1} / (x20 + V{1});
auto x35 = cell[0] + cell[12] + cell[3] + V{2}*cell[5] + V{1};
auto x36 = cell[10] + V{2}*cell[18] + cell[1];
auto x37 = V{2}*cell[11] + V{2}*cell[13] + cell[15] + cell[16] + V{2}*cell[17] + cell[6] + cell[7] + x35 + x36;
auto x38 = cell[11] + cell[2] + V{2}*cell[6];
auto x39 = cell[17] + cell[18] + V{2}*cell[1] + V{2}*cell[4] + V{2}*cell[7] + cell[8] + cell[9] + x35 + x38;
auto x40 = cell[0] + cell[13] + cell[14] + V{2}*cell[16] + V{2}*cell[3] + cell[4] + cell[5] + V{2}*cell[8] + x36 + x38 + V{1};
auto x41 = x21*x21;
auto x42 = V{1.5}*x41;
auto x43 = x19*x19;
auto x44 = V{1.5}*x43;
auto x45 = x20*x20;
auto x46 = V{1.5}*x45;
auto x47 = x44 + x46 + V{-1};
auto x48 = x42 + x47;
auto x49 = x48*(-V{0.111111111111111}*x24*x39 - V{0.111111111111111}*x32*x40 + V{0.111111111111111}*x34*x37);
auto x50 = -V{0.166666666666667}*x24*x39 - V{0.166666666666667}*x32*x40 + V{0.166666666666667}*x34*x37;
auto x51 = -V{0.00925925925925926}*x24*x39 - V{0.00925925925925926}*x32*x40 + V{0.00925925925925926}*x34*x37;
auto x52 = V{3}*x20;
auto x53 = x20 + x21;
auto x54 = V{4.5}*(x53*x53);
auto x55 = -x42;
auto x56 = V{1} - x46;
auto x57 = x55 + x56;
auto x58 = V{3}*x21;
auto x59 = -x44;
auto x60 = x58 + x59;
auto x61 = x52 + x54 + x57 + x60;
auto x62 = -V{5.55111512312578e-17}*x24*x39 - V{5.55111512312578e-17}*x32*x40 + V{5.55111512312578e-17}*x34*x37;
auto x63 = x48 + x58;
auto x64 = x52 - x54 + x63;
auto x65 = -x21;
auto x66 = x20 + x65;
auto x67 = -x66;
auto x68 = -x58;
auto x69 = x48 + x52;
auto x70 = x68 + x69;
auto x71 = x70 - V{4.5}*x67*x67;
auto x72 = -x52;
auto x73 = -V{4.5}*x66*x66;
auto x74 = x63 + x72 + x73;
auto x75 = -V{0.0185185185185185}*x24*x39 - V{0.0185185185185185}*x32*x40 + V{0.0185185185185185}*x34*x37;
auto x76 = x19 + x20;
auto x77 = V{4.5}*(x76*x76);
auto x78 = V{3}*x19;
auto x79 = x48 + x78;
auto x80 = x52 - x77 + x79;
auto x81 = x19 + x65;
auto x82 = -x81;
auto x83 = x68 + x79;
auto x84 = x83 - V{4.5}*x82*x82;
auto x85 = -V{0.037037037037037}*x24*x39 - V{0.037037037037037}*x32*x40 + V{0.037037037037037}*x34*x37;
auto x86 = V{3}*x43;
auto x87 = x42 + V{-1};
auto x88 = x46 + x78 - x86 + x87;
auto x89 = -V{7.40148683083438e-17}*x24*x39 - V{7.40148683083438e-17}*x32*x40 + V{7.40148683083438e-17}*x34*x37;
auto x90 = V{3}*x45;
auto x91 = x44 + x52 + x87 - x90;
auto x92 = -x75*x91;
auto x93 = x52 + x59;
auto x94 = x55 + x90 + x93 + V{1};
auto x95 = x75*x94;
auto x96 = V{5.55111512312578e-17}*cell[0];
auto x97 = V{5.55111512312578e-17}*cell[11] + V{5.55111512312578e-17}*cell[2] + V{1.11022302462516e-16}*cell[6] + x96 + V{5.55111512312578e-17};
auto x98 = V{5.55111512312578e-17}*cell[12] + V{5.55111512312578e-17}*cell[3] + V{1.11022302462516e-16}*cell[5];
auto x99 = x24*(V{5.55111512312578e-17}*cell[17] + V{5.55111512312578e-17}*cell[18] + V{1.11022302462516e-16}*cell[1] + V{1.11022302462516e-16}*cell[4] + V{1.11022302462516e-16}*cell[7] + V{5.55111512312578e-17}*cell[8] + V{5.55111512312578e-17}*cell[9] + x97 + x98);
auto x100 = V{1.11022302462516e-16}*cell[3];
auto x101 = V{5.55111512312578e-17}*cell[10] + V{1.11022302462516e-16}*cell[18] + V{5.55111512312578e-17}*cell[1];
auto x102 = x32*(V{5.55111512312578e-17}*cell[13] + V{5.55111512312578e-17}*cell[14] + V{1.11022302462516e-16}*cell[16] + V{5.55111512312578e-17}*cell[4] + V{5.55111512312578e-17}*cell[5] + V{1.11022302462516e-16}*cell[8] + x100 + x101 + x97);
auto x103 = V{1.11022302462516e-16}*cell[11];
auto x104 = -x34*(V{1.11022302462516e-16}*cell[13] + V{5.55111512312578e-17}*cell[15] + V{5.55111512312578e-17}*cell[16] + V{1.11022302462516e-16}*cell[17] + V{5.55111512312578e-17}*cell[6] + V{5.55111512312578e-17}*cell[7] + x101 + x103 + x96 + x98 + V{5.55111512312578e-17});
auto x105 = x19 + x21;
auto x106 = V{4.5}*(x105*x105);
auto x107 = -x106 + x58 + x79;
auto x108 = -x49;
auto x109 = x102 + x104 - x107*x75 + x108 + x92 + x95 + x99 + V{-2.22044604925031e-16};
auto x110 = V{3}*x41;
auto x111 = -x110 + x47 + x58;
auto x112 = -x111*x75;
auto x113 = x110 + x56 + x60;
auto x114 = x113*x75;
auto x115 = x19 - x20;
auto x116 = -x115;
auto x117 = x72 + x79;
auto x118 = x117 - V{4.5}*x116*x116;
auto x119 = -V{3.70074341541719e-17}*x24*x39 - V{3.70074341541719e-17}*x32*x40 + V{3.70074341541719e-17}*x34*x37;
auto x120 = V{1.11022302462516e-16}*cell[12] + V{3.33066907387547e-16}*cell[13] + V{3.33066907387547e-16}*cell[14] + V{3.33066907387547e-16}*cell[4] + V{3.33066907387547e-16}*cell[5] + x100 + x112 + x114 - x118*x75 - x119*x41;
auto x121 = x57 + x78;
auto x122 = x121 + x77 + x93;
auto x123 = -x78;
auto x124 = -V{4.5}*x115*x115;
auto x125 = x123 + x124 + x69;
auto x126 = -V{4.5}*x81*x81;
auto x127 = x123 + x126 + x63;
auto x128 = x121 + x86;
auto x129 = V{1.66533453693773e-16}*cell[10] + V{2.22044604925031e-16}*cell[18] + V{1.66533453693773e-16}*cell[1] + V{2.22044604925031e-16}*cell[9] + x128*x75 - x43*x62 - x74*x75 - x75*x88;
auto x130 = x106 + x121 + x60;
auto x131 = x24*(V{2.22044604925031e-16}*cell[10] + V{1.66533453693773e-16}*cell[11] + V{4.44089209850063e-16}*cell[15] + V{2.22044604925031e-16}*cell[16] + V{4.71844785465692e-16}*cell[17] + V{5.27355936696949e-16}*cell[18] + V{2.22044604925031e-16}*cell[1] + V{1.66533453693773e-16}*cell[2] + V{4.44089209850063e-16}*cell[6] + V{2.22044604925031e-16}*cell[7] + V{4.71844785465692e-16}*cell[8] + V{5.27355936696949e-16}*cell[9] + x109 + x120 - x43*x89 - x45*x62 + x51*x61 - x51*x64 - x51*x71 - x51*x74 - x75*x80 - x75*x84 - x85*x88) + x32*(V{2.22044604925031e-16}*cell[12] + V{4.71844785465692e-16}*cell[13] + V{5.27355936696949e-16}*cell[14] + V{3.33066907387547e-16}*cell[15] + V{3.33066907387547e-16}*cell[16] + V{1.11022302462516e-16}*cell[2] + V{2.22044604925031e-16}*cell[3] + V{4.71844785465692e-16}*cell[4] + V{5.27355936696949e-16}*cell[5] + V{3.33066907387547e-16}*cell[6] + V{3.33066907387547e-16}*cell[7] + x103 + x109 - x111*x85 - x118*x51 - x119*x45 + x122*x51 - x125*x51 - x127*x75 + x129 - x41*x89 - x51*x80 - x64*x75) - x34*(V{2.22044604925031e-16}*cell[11] + V{4.71844785465692e-16}*cell[15] + V{5.27355936696949e-16}*cell[16] + V{4.44089209850063e-16}*cell[17] + V{2.22044604925031e-16}*cell[2] + V{4.71844785465692e-16}*cell[6] + V{5.27355936696949e-16}*cell[7] + V{4.44089209850063e-16}*cell[8] + x102 + x104 - x107*x51 + x108 + x120 + x122*x75 - x127*x51 + x129 + x130*x51 - x45*x89 - x51*x84 + x61*x75 + x85*x94 + x99 + V{-2.22044604925031e-16});
auto x132 = -x131;
auto x133 = V{0.0185185185185185}*x24*x39 + V{0.0185185185185185}*x32*x40 - V{0.0185185185185185}*x34*x37;
auto x134 = V{0.0277777777777778}*x24*x39 + V{0.0277777777777778}*x32*x40 - V{0.0277777777777778}*x34*x37;
auto x135 = V{3.46944695195361e-18}*cell[0];
auto x136 = V{3.46944695195361e-18}*cell[11] + V{3.46944695195361e-18}*cell[2] + V{6.93889390390723e-18}*cell[6] + x135 + V{3.46944695195361e-18};
auto x137 = V{3.46944695195361e-18}*cell[12] + V{3.46944695195361e-18}*cell[3] + V{6.93889390390723e-18}*cell[5];
auto x138 = x24*(V{3.46944695195361e-18}*cell[17] + V{3.46944695195361e-18}*cell[18] + V{6.93889390390723e-18}*cell[1] + V{6.93889390390723e-18}*cell[4] + V{6.93889390390723e-18}*cell[7] + V{3.46944695195361e-18}*cell[8] + V{3.46944695195361e-18}*cell[9] + x136 + x137);
auto x139 = V{3.46944695195361e-18}*cell[10] + V{6.93889390390723e-18}*cell[18] + V{3.46944695195361e-18}*cell[1];
auto x140 = x32*(V{3.46944695195361e-18}*cell[13] + V{3.46944695195361e-18}*cell[14] + V{6.93889390390723e-18}*cell[16] + V{6.93889390390723e-18}*cell[3] + V{3.46944695195361e-18}*cell[4] + V{3.46944695195361e-18}*cell[5] + V{6.93889390390723e-18}*cell[8] + x136 + x139);
auto x141 = -x34*(V{6.93889390390723e-18}*cell[11] + V{6.93889390390723e-18}*cell[13] + V{3.46944695195361e-18}*cell[15] + V{3.46944695195361e-18}*cell[16] + V{6.93889390390723e-18}*cell[17] + V{3.46944695195361e-18}*cell[6] + V{3.46944695195361e-18}*cell[7] + x135 + x137 + x139 + V{3.46944695195361e-18});
auto x142 = -V{0.0833333333333333}*cell[12] + V{0.0833333333333334}*cell[13] + V{0.0833333333333334}*cell[14] - V{0.0833333333333333}*cell[3] + V{0.0833333333333334}*cell[4] + V{0.0833333333333334}*cell[5] + x138 + x140 + x141 + V{-0.0555555555555555};
auto x143 = -V{0.0833333333333333}*cell[11] + V{0.0833333333333334}*cell[15] + V{0.0833333333333334}*cell[16] - V{0.0833333333333333}*cell[2] + V{0.0833333333333334}*cell[6] + V{0.0833333333333334}*cell[7];
auto x144 = V{0.166666666666667}*cell[10] + V{0.166666666666667}*cell[1] - x134*x41 - x134*x45 + x142 + x143 - x25 - x26 - x27 - x28 + x43*(V{0.0555555555555556}*x24*x39 + V{0.0555555555555556}*x32*x40 - V{0.0555555555555556}*x34*x37);
auto x145 = -V{0.0277777777777778}*x24*x39 - V{0.0277777777777778}*x32*x40 + V{0.0277777777777778}*x34*x37;
auto x146 = x24*x39 + x32*x40 - x34*x37;
auto x147 = -x146;
auto x148 = -V{0.0833333333333333}*cell[10] + V{0.0833333333333334}*cell[17] + V{0.0833333333333334}*cell[18] - V{0.0833333333333333}*cell[1] + V{0.0833333333333334}*cell[8] + V{0.0833333333333334}*cell[9] + x145*x43;
auto x149 = V{0.166666666666667}*cell[11] - V{0.166666666666667}*cell[15] - V{0.166666666666667}*cell[16] + V{0.166666666666667}*cell[2] - V{0.166666666666667}*cell[6] - V{0.166666666666667}*cell[7] + x142 + x145*x41 - V{0.0555555555555556}*x147*x45 + x148;
auto x150 = V{0.166666666666667}*cell[12] - V{0.166666666666667}*cell[13] - V{0.166666666666667}*cell[14] + V{0.166666666666667}*cell[3] - V{0.166666666666667}*cell[4] - V{0.166666666666667}*cell[5] + x138 + x140 + x141 + x143 + x145*x45 - V{0.0555555555555556}*x147*x41 + x148 + V{-0.0555555555555555};
auto x151 = V{0.00925925925925926}*x24*x39 + V{0.00925925925925926}*x32*x40 - V{0.00925925925925926}*x34*x37;
auto x152 = V{0.0833333333333333}*x146*x19;
auto x153 = x152*x20;
auto x154 = V{0.0138888888888889}*x24*x39 + V{0.0138888888888889}*x32*x40 - V{0.0138888888888889}*x34*x37;
auto x155 = V{0.0138888888888889}*cell[0];
auto x156 = V{0.0138888888888889}*cell[11] + V{0.0138888888888889}*cell[2] + V{0.0277777777777778}*cell[6] + x155 + V{0.0138888888888889};
auto x157 = V{0.0138888888888889}*cell[12] + V{0.0138888888888889}*cell[3] + V{0.0277777777777778}*cell[5];
auto x158 = x24*(V{0.0138888888888889}*cell[17] + V{0.0138888888888889}*cell[18] + V{0.0277777777777778}*cell[1] + V{0.0277777777777778}*cell[4] + V{0.0277777777777778}*cell[7] + V{0.0138888888888889}*cell[8] + V{0.0138888888888889}*cell[9] + x156 + x157);
auto x159 = V{0.0138888888888889}*cell[10] + V{0.0277777777777778}*cell[18] + V{0.0138888888888889}*cell[1];
auto x160 = x32*(V{0.0138888888888889}*cell[13] + V{0.0138888888888889}*cell[14] + V{0.0277777777777778}*cell[16] + V{0.0277777777777778}*cell[3] + V{0.0138888888888889}*cell[4] + V{0.0138888888888889}*cell[5] + V{0.0277777777777778}*cell[8] + x156 + x159);
auto x161 = -x34*(V{0.0277777777777778}*cell[11] + V{0.0277777777777778}*cell[13] + V{0.0138888888888889}*cell[15] + V{0.0138888888888889}*cell[16] + V{0.0277777777777778}*cell[17] + V{0.0138888888888889}*cell[6] + V{0.0138888888888889}*cell[7] + x155 + x157 + x159 + V{0.0138888888888889});
auto x162 = V{0.0277777777777778}*x24*x39 + V{0.0277777777777778}*x32*x40 - V{0.0277777777777778}*x34*x37;
auto x163 = V{0.0833333333333333}*cell[10] + V{0.0416666666666667}*cell[17] + V{0.0416666666666667}*cell[18] + V{0.0833333333333333}*cell[1] + V{0.0416666666666667}*cell[8] + V{0.0416666666666667}*cell[9] + x158 + x160 + x161 + x162*x43 + V{0.0138888888888889};
auto x164 = V{0.0833333333333333}*cell[11] + V{0.0416666666666667}*cell[15] + V{0.0416666666666667}*cell[16] + V{0.0833333333333333}*cell[2] + V{0.0416666666666667}*cell[6] + V{0.0416666666666667}*cell[7] + x162*x45;
auto x165 = -V{0.0416666666666667}*cell[12] - V{0.0416666666666667}*cell[3] - x154*x41 + x163 + x164;
auto x166 = V{0.416666666666667}*cell[13] - V{0.0833333333333333}*cell[14] + V{0.416666666666667}*cell[4] - V{0.0833333333333333}*cell[5] + x153 + x165;
auto x167 = -V{0.0833333333333333}*cell[13] + V{0.416666666666667}*cell[14] - V{0.0833333333333333}*cell[4] + V{0.416666666666667}*cell[5] - x153 + x165;
auto x168 = x152*x21;
auto x169 = V{0.0833333333333333}*cell[12] + V{0.0416666666666667}*cell[13] + V{0.0416666666666667}*cell[14] + V{0.0833333333333333}*cell[3] + V{0.0416666666666667}*cell[4] + V{0.0416666666666667}*cell[5] + x162*x41;
auto x170 = -V{0.0416666666666667}*cell[11] - V{0.0416666666666667}*cell[2] - x154*x45 + x163 + x169;
auto x171 = V{0.416666666666667}*cell[15] - V{0.0833333333333333}*cell[16] + V{0.416666666666667}*cell[6] - V{0.0833333333333333}*cell[7] + x168 + x170;
auto x172 = -V{0.0833333333333333}*cell[15] + V{0.416666666666667}*cell[16] - V{0.0833333333333333}*cell[6] + V{0.416666666666667}*cell[7] - x168 + x170;
auto x173 = V{0.0833333333333333}*x146*x20*x21;
auto x174 = -V{0.0416666666666667}*cell[10] - V{0.0416666666666667}*cell[1] - x154*x43 + x158 + x160 + x161 + x164 + x169 + V{0.0138888888888889};
auto x175 = V{0.416666666666667}*cell[17] - V{0.0833333333333333}*cell[18] + V{0.416666666666667}*cell[8] - V{0.0833333333333333}*cell[9] + x173 + x174;
auto x176 = -V{0.0833333333333333}*cell[17] + V{0.416666666666667}*cell[18] - V{0.0833333333333333}*cell[8] + V{0.416666666666667}*cell[9] - x173 + x174;
auto x0 = -x22*(V{0.111111111111111}*x132*x48 + V{0.333333333333333}) + x23*(V{0.5}*cell[10] + V{0.5}*cell[11] + V{0.5}*cell[12] + V{1}*cell[13] + V{1}*cell[14] + V{1}*cell[15] + V{1}*cell[16] + V{1}*cell[17] + V{1}*cell[18] + V{0.5}*cell[1] + V{0.5}*cell[2] + V{0.5}*cell[3] + V{1}*cell[4] + V{1}*cell[5] + V{1}*cell[6] + V{1}*cell[7] + V{1}*cell[8] + V{1}*cell[9] + x24*(V{0.333333333333333}*cell[1] + V{0.333333333333333}*cell[4] + V{0.333333333333333}*cell[7] + x25 + x26 + x27 + x28 + x30 + x31) + x32*(V{0.166666666666667}*cell[13] + V{0.166666666666667}*cell[14] + V{0.333333333333333}*cell[16] + V{0.333333333333333}*cell[3] + V{0.166666666666667}*cell[4] + V{0.166666666666667}*cell[5] + V{0.333333333333333}*cell[8] + x30 + x33) - x34*(V{0.333333333333333}*cell[11] + V{0.333333333333333}*cell[13] + V{0.166666666666667}*cell[15] + V{0.166666666666667}*cell[16] + V{0.333333333333333}*cell[17] + V{0.166666666666667}*cell[6] + V{0.166666666666667}*cell[7] + x29 + x31 + x33 + V{0.166666666666667}) - x41*x50 - x43*x50 - x45*x50 + x49 + V{0.833333333333333});
auto x1 = -x22*(V{0.0185185185185185}*x132*x88 + V{0.0555555555555556}) - x23*(x133*x88 + x144);
auto x2 = -x22*(V{0.0185185185185185}*x132*x91 + V{0.0555555555555556}) + x23*(-x149 - x92);
auto x3 = -x22*(V{0.0185185185185185}*x111*x132 + V{0.0555555555555556}) + x23*(-x112 - x150);
auto x4 = -x22*(V{0.00925925925925926}*x132*x80 + V{0.0277777777777778}) - x23*(x151*x80 + x166);
auto x5 = -x22*(V{0.00925925925925926}*x118*x132 + V{0.0277777777777778}) - x23*(x151*(x117 + x124) + x167);
auto x6 = -x22*(V{0.00925925925925926}*x107*x132 + V{0.0277777777777778}) - x23*(x107*x151 + x171);
auto x7 = -x22*(V{0.00925925925925926}*x132*x84 + V{0.0277777777777778}) - x23*(x151*(x126 + x83) + x172);
auto x8 = -x22*(V{0.00925925925925926}*x132*x64 + V{0.0277777777777778}) - x23*(x151*x64 + x175);
auto x9 = -x22*(V{0.00925925925925926}*x132*x71 + V{0.0277777777777778}) - x23*(x151*(x70 + x73) + x176);
auto x10 = -x22*(V{0.0185185185185185}*x128*x131 + V{0.0555555555555556}) - x23*(-x128*x133 + x144);
auto x11 = -x22*(V{0.0185185185185185}*x131*x94 + V{0.0555555555555556}) + x23*(-x149 - x95);
auto x12 = -x22*(V{0.0185185185185185}*x113*x131 + V{0.0555555555555556}) + x23*(-x114 - x150);
auto x13 = -x22*(V{0.00925925925925926}*x122*x131 + V{0.0277777777777778}) - x23*(-x122*x151 + x166);
auto x14 = -x22*(V{0.00925925925925926}*x125*x132 + V{0.0277777777777778}) - x23*(x125*x151 + x167);
auto x15 = -x22*(V{0.00925925925925926}*x130*x131 + V{0.0277777777777778}) - x23*(-x130*x151 + x171);
auto x16 = -x22*(V{0.00925925925925926}*x127*x132 + V{0.0277777777777778}) - x23*(x127*x151 + x172);
auto x17 = -x22*(V{0.00925925925925926}*x131*x61 + V{0.0277777777777778}) - x23*(-x151*x61 + x175);
auto x18 = -x22*(V{0.00925925925925926}*x132*x74 + V{0.0277777777777778}) - x23*(x151*x74 + x176);
cell[0] = x0;
cell[1] = x1;
cell[2] = x2;
cell[3] = x3;
cell[4] = x4;
cell[5] = x5;
cell[6] = x6;
cell[7] = x7;
cell[8] = x8;
cell[9] = x9;
cell[10] = x10;
cell[11] = x11;
cell[12] = x12;
cell[13] = x13;
cell[14] = x14;
cell[15] = x15;
cell[16] = x16;
cell[17] = x17;
cell[18] = x18;
return { V{0.333333333333333}*x132, x41 + x43 + x45 };
}
};

}

}
