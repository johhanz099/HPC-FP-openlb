/*  This file is part of the OpenLB library
 *
 *  Copyright (C) 2021-24 Adrian Kummerlaender, Shota Ito
 *  E-mail contact: info@openlb.net
 *  The most recent release of OpenLB can be downloaded at
 *  <http://www.openlb.net/>
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public
 *  License along with this program; if not, write to the Free
 *  Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA  02110-1301, USA.
*/

/*  ========================================================
 *  ==  WARNING: This is an automatically generated file, ==
 *  ==                  do not modify.                    ==
 *  ========================================================
 */

#pragma once


namespace olb {

namespace dynamics {

template <typename T, typename... FIELDS>
struct CSE<CombinedRLBdynamics<T, descriptors::D3Q19<FIELDS...>, dynamics::Tuple<T, descriptors::D3Q19<FIELDS...>, momenta::Tuple<momenta::BulkDensity, momenta::BulkMomentum, momenta::BulkStress, momenta::DefineToNEq>, equilibria::SecondOrder, collision::BGK, dynamics::DefaultCombination>, momenta::Tuple<momenta::InnerEdgeDensity3D<2, -1, -1>, momenta::FixedVelocityMomentumGeneric, momenta::InnerEdgeStress3D<2, -1, -1>, momenta::DefineSeparately> >> {
template <concepts::Cell CELL, concepts::Parameters PARAMETERS, concepts::BaseType V=typename CELL::value_t>
CellStatistic<V> collide(CELL& cell, PARAMETERS& parameters) any_platform {
auto x19 = cell.template getFieldComponent<momenta::FixedVelocityMomentumGeneric::VELOCITY>(0);
auto x22 = parameters.template get<descriptors::OMEGA>();
auto x20 = cell.template getFieldComponent<momenta::FixedVelocityMomentumGeneric::VELOCITY>(1);
auto x21 = cell.template getFieldComponent<momenta::FixedVelocityMomentumGeneric::VELOCITY>(2);
auto x23 = x22 + V{-1};
auto x24 = V{0.5}*cell[1];
auto x25 = V{0.5}*cell[2];
auto x26 = V{2}*cell[4];
auto x27 = V{1} / (x19 + V{-1});
auto x28 = V{0.25}*cell[0] + V{0.25}*cell[12] + V{0.25}*cell[3] + V{0.5}*cell[4] + V{0.25};
auto x29 = V{1} / (x20 + V{-1});
auto x30 = cell[0] + cell[12] + cell[3] + x26 + V{1};
auto x31 = cell[11] + cell[17] + cell[18] + V{2}*cell[1] + cell[2] + V{2}*cell[5] + V{2}*cell[6] + V{2}*cell[7] + cell[8] + cell[9] + x30;
auto x32 = cell[10] + V{2}*cell[14] + cell[15] + cell[16] + cell[1] + V{2}*cell[2] + cell[6] + cell[7] + V{2}*cell[8] + V{2}*cell[9] + x30;
auto x33 = V{0.25}*x27*x31 + V{0.25}*x29*x32;
auto x34 = x19*x19;
auto x35 = x20*x20;
auto x36 = x21*x21;
auto x37 = V{0.0138888888888889}*x27*x31 + V{0.0138888888888889}*x29*x32;
auto x38 = x19 + x20;
auto x39 = V{4.5}*(x38*x38);
auto x40 = V{3}*x20;
auto x41 = V{1.5}*x36;
auto x42 = -x41;
auto x43 = V{1.5}*x34;
auto x44 = V{1} - x43;
auto x45 = x42 + x44;
auto x46 = x40 + x45;
auto x47 = V{3}*x19;
auto x48 = V{1.5}*x35;
auto x49 = -x48;
auto x50 = x47 + x49;
auto x51 = x39 + x46 + x50;
auto x52 = x43 + x48 + V{-1};
auto x53 = x41 + x52;
auto x54 = x40 + x53;
auto x55 = -x39 + x47 + x54;
auto x56 = x53*(V{0.166666666666667}*x27*x31 + V{0.166666666666667}*x29*x32);
auto x57 = V{3}*x21;
auto x58 = x20 + x21;
auto x59 = V{4.5}*(x58*x58);
auto x60 = x54 + x57 - x59;
auto x61 = x37*x60;
auto x62 = x49 + x57;
auto x63 = x46 + x59 + x62;
auto x64 = -x37*x63;
auto x65 = -x40;
auto x66 = -x21;
auto x67 = x20 + x66;
auto x68 = -V{4.5}*x67*x67;
auto x69 = x53 + x57;
auto x70 = x65 + x68 + x69;
auto x71 = x37*x70;
auto x72 = V{1.11022302462516e-16}*x27*x31 + V{1.11022302462516e-16}*x29*x32;
auto x73 = V{8.32667268468867e-17}*x27*x31 + V{8.32667268468867e-17}*x29*x32;
auto x74 = -x67;
auto x75 = -x57;
auto x76 = x54 + x75;
auto x77 = x76 - V{4.5}*x74*x74;
auto x78 = V{0.0277777777777778}*x27*x31 + V{0.0277777777777778}*x29*x32;
auto x79 = V{3}*x35;
auto x80 = x41 + V{-1};
auto x81 = x40 + x43 - x79 + x80;
auto x82 = x78*x81;
auto x83 = x19 + x21;
auto x84 = V{4.5}*(x83*x83);
auto x85 = x47 + x69 - x84;
auto x86 = x19 - x20;
auto x87 = -x86;
auto x88 = x47 + x53;
auto x89 = x65 + x88;
auto x90 = x89 - V{4.5}*x87*x87;
auto x91 = x19 + x66;
auto x92 = -x91;
auto x93 = x75 + x88;
auto x94 = x93 - V{4.5}*x92*x92;
auto x95 = V{0.0555555555555556}*x27*x31 + V{0.0555555555555556}*x29*x32;
auto x96 = V{3}*x34;
auto x97 = x47 + x48 + x80 - x96;
auto x98 = x46 + x79;
auto x99 = x78*x98;
auto x100 = V{3}*x36;
auto x101 = -x100 + x52 + x57;
auto x102 = x101*x78;
auto x103 = x100 + x44 + x62;
auto x104 = -x103*x78;
auto x105 = V{5.55111512312578e-17}*cell[0] + V{5.55111512312578e-17}*cell[12] + V{5.55111512312578e-17}*cell[3] + V{1.11022302462516e-16}*cell[4] + V{5.55111512312578e-17};
auto x106 = V{3.33066907387547e-16}*cell[14] + V{3.33066907387547e-16}*cell[5] + x102 + x104 + x27*(V{5.55111512312578e-17}*cell[11] + V{5.55111512312578e-17}*cell[17] + V{5.55111512312578e-17}*cell[18] + V{1.11022302462516e-16}*cell[1] + V{5.55111512312578e-17}*cell[2] + V{1.11022302462516e-16}*cell[5] + V{1.11022302462516e-16}*cell[6] + V{1.11022302462516e-16}*cell[7] + V{5.55111512312578e-17}*cell[8] + V{5.55111512312578e-17}*cell[9] + x105) + x29*(V{5.55111512312578e-17}*cell[10] + V{1.11022302462516e-16}*cell[14] + V{5.55111512312578e-17}*cell[15] + V{5.55111512312578e-17}*cell[16] + V{5.55111512312578e-17}*cell[1] + V{1.11022302462516e-16}*cell[2] + V{5.55111512312578e-17}*cell[6] + V{5.55111512312578e-17}*cell[7] + V{1.11022302462516e-16}*cell[8] + V{1.11022302462516e-16}*cell[9] + x105) + x56 + V{-2.22044604925031e-16};
auto x107 = x78*x97;
auto x108 = x37*x85;
auto x109 = x45 + x47 + x62 + x84;
auto x110 = -x109*x37;
auto x111 = -x47;
auto x112 = -V{4.5}*x91*x91;
auto x113 = x111 + x112 + x69;
auto x114 = x113*x37;
auto x115 = -V{4.5}*x86*x86;
auto x116 = x111 + x115 + x54;
auto x117 = x42 + x50 + x96 + V{1};
auto x118 = x117*x78;
auto x119 = x27*(V{2.22044604925031e-16}*cell[10] + V{1.66533453693773e-16}*cell[11] + V{1.11022302462516e-16}*cell[12] + V{4.44089209850063e-16}*cell[15] + V{2.22044604925031e-16}*cell[16] + V{4.71844785465692e-16}*cell[17] + V{5.27355936696949e-16}*cell[18] + V{2.22044604925031e-16}*cell[1] + V{1.66533453693773e-16}*cell[2] + V{1.11022302462516e-16}*cell[3] + V{6.66133814775094e-16}*cell[4] + V{4.44089209850063e-16}*cell[6] + V{2.22044604925031e-16}*cell[7] + V{4.71844785465692e-16}*cell[8] + V{5.27355936696949e-16}*cell[9] + x106 + x34*x72 + x35*x73 + x36*(V{5.55111512312578e-17}*x27*x31 + V{5.55111512312578e-17}*x29*x32) + x37*x77 - x51*(V{4.62592926927149e-18}*x27*x31 + V{4.62592926927149e-18}*x29*x32) + x55*(V{0.0277777777777778}*x27*x31 + V{0.0277777777777778}*x29*x32) + x61 + x64 + x71 + x78*x85 + x78*x90 + x78*x94 + x82 + x95*x97 - x99) + x29*(V{1.66533453693773e-16}*cell[10] + V{2.22044604925031e-16}*cell[11] + V{9.71445146547012e-17}*cell[12] + V{4.71844785465692e-16}*cell[15] + V{5.27355936696949e-16}*cell[16] + V{2.22044604925031e-16}*cell[17] + V{2.22044604925031e-16}*cell[18] + V{1.66533453693773e-16}*cell[1] + V{2.22044604925031e-16}*cell[2] + V{9.71445146547012e-17}*cell[3] + V{2.22044604925031e-16}*cell[4] + V{4.71844785465692e-16}*cell[6] + V{5.27355936696949e-16}*cell[7] + V{2.22044604925031e-16}*cell[8] + V{2.22044604925031e-16}*cell[9] + x106 + x107 + x108 + x110 + x114 + x116*x78 - x118 + x34*x73 + x35*x72 + x36*(V{4.85722573273506e-17}*x27*x31 + V{4.85722573273506e-17}*x29*x32) + x37*x94 - x51*(V{1.5419764230905e-18}*x27*x31 + V{1.5419764230905e-18}*x29*x32) + x55*(V{0.0277777777777778}*x27*x31 + V{0.0277777777777778}*x29*x32) + x60*x78 + x77*x78 + x81*x95);
auto x120 = V{0.0833333333333334}*cell[14];
auto x121 = V{0.0833333333333334}*cell[5];
auto x122 = V{0.166666666666667}*cell[4];
auto x123 = V{0.0833333333333333}*cell[12];
auto x124 = V{0.0833333333333333}*cell[3];
auto x125 = V{0.166666666666667}*cell[17];
auto x126 = V{0.166666666666667}*cell[18];
auto x127 = V{0.166666666666667}*cell[8];
auto x128 = V{0.166666666666667}*cell[9];
auto x129 = V{0.0833333333333333}*x27*x31 + V{0.0833333333333333}*x29*x32;
auto x130 = V{0.00115740740740741}*x27*x31 + V{0.00115740740740741}*x29*x32;
auto x131 = x130*x51;
auto x132 = x130*x55;
auto x133 = V{0.0416666666666667}*x27*x31 + V{0.0416666666666667}*x29*x32;
auto x134 = x133*x36;
auto x135 = V{0.0833333333333333}*cell[11];
auto x136 = V{0.0833333333333333}*cell[2];
auto x137 = V{3.46944695195361e-18}*cell[0] + V{3.46944695195361e-18}*cell[12] + V{3.46944695195361e-18}*cell[3] + V{6.93889390390723e-18}*cell[4] + V{3.46944695195361e-18};
auto x138 = x27*(V{3.46944695195361e-18}*cell[11] + V{3.46944695195361e-18}*cell[17] + V{3.46944695195361e-18}*cell[18] + V{6.93889390390723e-18}*cell[1] + V{3.46944695195361e-18}*cell[2] + V{6.93889390390723e-18}*cell[5] + V{6.93889390390723e-18}*cell[6] + V{6.93889390390723e-18}*cell[7] + V{3.46944695195361e-18}*cell[8] + V{3.46944695195361e-18}*cell[9] + x137);
auto x139 = x29*(V{3.46944695195361e-18}*cell[10] + V{6.93889390390723e-18}*cell[14] + V{3.46944695195361e-18}*cell[15] + V{3.46944695195361e-18}*cell[16] + V{3.46944695195361e-18}*cell[1] + V{6.93889390390723e-18}*cell[2] + V{3.46944695195361e-18}*cell[6] + V{3.46944695195361e-18}*cell[7] + V{6.93889390390723e-18}*cell[8] + V{6.93889390390723e-18}*cell[9] + x137);
auto x140 = x133*x35;
auto x141 = V{0.0833333333333334}*cell[15] + V{0.0833333333333334}*cell[16] + V{0.0833333333333334}*cell[6] + V{0.0833333333333334}*cell[7] - x135 - x136 + x138 + x139 - x140 + V{-0.0555555555555555};
auto x142 = V{0.0833333333333333}*cell[10];
auto x143 = V{0.0833333333333333}*cell[1];
auto x144 = V{0.0833333333333334}*cell[17];
auto x145 = V{0.0833333333333334}*cell[18];
auto x146 = V{0.0833333333333334}*cell[8];
auto x147 = V{0.0833333333333334}*cell[9];
auto x148 = x133*x34;
auto x149 = -x120 - x121 - x122 + x123 + x124 + x131 + x132 + x134 - x138 - x139 + V{0.0555555555555555};
auto x150 = -V{0.166666666666667}*cell[11] + V{0.166666666666667}*cell[15] + V{0.166666666666667}*cell[16] - V{0.166666666666667}*cell[2] + V{0.166666666666667}*cell[6] + V{0.166666666666667}*cell[7] - x129*x35 + x142 + x143 - x144 - x145 - x146 - x147 + x148 + x149;
auto x151 = V{0.00231481481481481}*x27*x31 + V{0.00231481481481481}*x29*x32;
auto x152 = V{0.166666666666667}*cell[12] - V{0.166666666666667}*cell[14] + V{0.166666666666667}*cell[3] - V{0.333333333333333}*cell[4] - V{0.166666666666667}*cell[5] + x129*x36 + x141 - x142 - x143 + x144 + x145 + x146 + x147 - x148 + x151*x51 + x151*x55;
auto x153 = V{0.00578703703703704}*x27*x31 + V{0.00578703703703704}*x29*x32;
auto x154 = x27*x31 + x29*x32;
auto x155 = V{0.125}*x154*x19;
auto x156 = x155*x20;
auto x157 = V{0.0208333333333333}*x27*x31 + V{0.0208333333333333}*x29*x32;
auto x158 = V{0.0208333333333333}*cell[0] + V{0.0208333333333333}*cell[12] + V{0.0208333333333333}*cell[3] + V{0.0416666666666667}*cell[4] + V{0.0208333333333333};
auto x159 = x27*(V{0.0208333333333333}*cell[11] + V{0.0208333333333333}*cell[17] + V{0.0208333333333333}*cell[18] + V{0.0416666666666667}*cell[1] + V{0.0208333333333333}*cell[2] + V{0.0416666666666667}*cell[5] + V{0.0416666666666667}*cell[6] + V{0.0416666666666667}*cell[7] + V{0.0208333333333333}*cell[8] + V{0.0208333333333333}*cell[9] + x158);
auto x160 = x29*(V{0.0208333333333333}*cell[10] + V{0.0416666666666667}*cell[14] + V{0.0208333333333333}*cell[15] + V{0.0208333333333333}*cell[16] + V{0.0208333333333333}*cell[1] + V{0.0416666666666667}*cell[2] + V{0.0208333333333333}*cell[6] + V{0.0208333333333333}*cell[7] + V{0.0416666666666667}*cell[8] + V{0.0416666666666667}*cell[9] + x158);
auto x161 = V{0.0416666666666667}*x27*x31 + V{0.0416666666666667}*x29*x32;
auto x162 = V{0.0833333333333333}*cell[10] + V{0.0416666666666667}*cell[17] + V{0.0416666666666667}*cell[18] + V{0.0833333333333333}*cell[1] + V{0.0416666666666667}*cell[8] + V{0.0416666666666667}*cell[9] + x159 + x160 + x161*x34 + V{0.0138888888888889};
auto x163 = V{0.0833333333333333}*cell[11] + V{0.0416666666666667}*cell[15] + V{0.0416666666666667}*cell[16] + V{0.0833333333333333}*cell[2] + V{0.0416666666666667}*cell[6] + V{0.0416666666666667}*cell[7] + x161*x35;
auto x164 = -V{0.0416666666666667}*cell[12] - V{0.0416666666666667}*cell[3] - x157*x36 + x162 + x163;
auto x165 = -V{0.0833333333333333}*cell[14] + V{0.833333333333333}*cell[4] - V{0.0833333333333333}*cell[5] + x156 + x164;
auto x166 = V{0.00115740740740741}*x27*x31 + V{0.00115740740740741}*x29*x32;
auto x167 = V{0.416666666666667}*cell[14] - V{0.166666666666667}*cell[4] + V{0.416666666666667}*cell[5] - x156 + x164 + x166*x51 + x166*x55;
auto x168 = x155*x21;
auto x169 = V{0.000578703703703704}*x27*x31 + V{0.000578703703703704}*x29*x32;
auto x170 = V{0.0833333333333333}*cell[12] + V{0.0416666666666667}*cell[14] + V{0.0833333333333333}*cell[3] + V{0.0833333333333334}*cell[4] + V{0.0416666666666667}*cell[5] + x161*x36 - x169*x51 - x169*x55;
auto x171 = -V{0.0416666666666667}*cell[11] - V{0.0416666666666667}*cell[2] - x157*x35 + x162 + x170;
auto x172 = V{0.416666666666667}*cell[15] - V{0.0833333333333333}*cell[16] + V{0.416666666666667}*cell[6] - V{0.0833333333333333}*cell[7] + x168 + x171;
auto x173 = -V{0.0833333333333333}*cell[15] + V{0.416666666666667}*cell[16] - V{0.0833333333333333}*cell[6] + V{0.416666666666667}*cell[7] - x168 + x171;
auto x174 = V{0.125}*x154*x20*x21;
auto x175 = -V{0.0416666666666667}*cell[10] - V{0.0416666666666667}*cell[1] - x157*x34 + x159 + x160 + x163 + x170 + V{0.0138888888888889};
auto x176 = V{0.416666666666667}*cell[17] - V{0.0833333333333333}*cell[18] + V{0.416666666666667}*cell[8] - V{0.0833333333333333}*cell[9] + x174 + x175;
auto x177 = -V{0.0833333333333333}*cell[17] + V{0.416666666666667}*cell[18] - V{0.0833333333333333}*cell[8] + V{0.416666666666667}*cell[9] - x174 + x175;
auto x0 = -x22*(-V{0.166666666666667}*x119*x53 + V{0.333333333333333}) + x23*(V{0.5}*cell[10] + V{0.5}*cell[11] + V{0.5}*cell[12] + V{1}*cell[14] + V{1}*cell[15] + V{1}*cell[16] + V{1}*cell[17] + V{1}*cell[18] + V{0.5}*cell[3] + V{1}*cell[5] + V{1}*cell[6] + V{1}*cell[7] + V{1}*cell[8] + V{1}*cell[9] + x24 + x25 + x26 + x27*(V{0.25}*cell[11] + V{0.25}*cell[17] + V{0.25}*cell[18] + V{0.25}*cell[2] + V{0.5}*cell[5] + V{0.5}*cell[6] + V{0.5}*cell[7] + V{0.25}*cell[8] + V{0.25}*cell[9] + x24 + x28) + x29*(V{0.25}*cell[10] + V{0.5}*cell[14] + V{0.25}*cell[15] + V{0.25}*cell[16] + V{0.25}*cell[1] + V{0.25}*cell[6] + V{0.25}*cell[7] + V{0.5}*cell[8] + V{0.5}*cell[9] + x25 + x28) + x33*x34 + x33*x35 + x33*x36 - x37*x51 - x37*x55 - x56 + V{0.833333333333333});
auto x1 = -x22*(-V{0.0277777777777778}*x119*x97 + V{0.0555555555555556}) - x23*(V{0.166666666666667}*cell[10] + V{0.166666666666667}*cell[1] + x107 + x120 + x121 + x122 - x123 - x124 - x125 - x126 - x127 - x128 + x129*x34 - x131 - x132 - x134 + x141);
auto x2 = -x22*(-V{0.0277777777777778}*x119*x81 + V{0.0555555555555556}) + x23*(x150 - x82);
auto x3 = -x22*(-V{0.0277777777777778}*x101*x119 + V{0.0555555555555556}) - x23*(x102 + x152);
auto x4 = -x22*(-V{0.0138888888888889}*x119*x55 + V{0.0277777777777778}) - x23*(-x153*x51 + x165 + x55*(V{0.00810185185185185}*x27*x31 + V{0.00810185185185185}*x29*x32));
auto x5 = -x22*(-V{0.0138888888888889}*x119*x90 + V{0.0277777777777778}) - x23*(x167 + x37*(x115 + x89));
auto x6 = -x22*(-V{0.0138888888888889}*x119*x85 + V{0.0277777777777778}) - x23*(x108 + x172);
auto x7 = -x22*(-V{0.0138888888888889}*x119*x94 + V{0.0277777777777778}) - x23*(x173 + x37*(x112 + x93));
auto x8 = -x22*(-V{0.0138888888888889}*x119*x60 + V{0.0277777777777778}) - x23*(x176 + x61);
auto x9 = -x22*(-V{0.0138888888888889}*x119*x77 + V{0.0277777777777778}) - x23*(x177 + x37*(x68 + x76));
auto x10 = -x22*(V{0.0277777777777778}*x117*x119 + V{0.0555555555555556}) - x23*(V{0.166666666666667}*cell[10] + V{0.0833333333333334}*cell[15] + V{0.0833333333333334}*cell[16] + V{0.166666666666667}*cell[1] + V{0.0833333333333334}*cell[6] + V{0.0833333333333334}*cell[7] - x118 - x125 - x126 - x127 - x128 - x135 - x136 - x140 - x149 + V{0.0833333333333333}*x154*x34);
auto x11 = -x22*(V{0.0277777777777778}*x119*x98 + V{0.0555555555555556}) + x23*(x150 + x99);
auto x12 = -x22*(V{0.0277777777777778}*x103*x119 + V{0.0555555555555556}) - x23*(x104 + x152);
auto x13 = -x22*(V{0.0138888888888889}*x119*x51 + V{0.0277777777777778}) - x23*(-x153*x55 + x165 - x51*(V{0.0196759259259259}*x27*x31 + V{0.0196759259259259}*x29*x32));
auto x14 = -x22*(-V{0.0138888888888889}*x116*x119 + V{0.0277777777777778}) - x23*(x116*x37 + x167);
auto x15 = -x22*(V{0.0138888888888889}*x109*x119 + V{0.0277777777777778}) - x23*(x110 + x172);
auto x16 = -x22*(-V{0.0138888888888889}*x113*x119 + V{0.0277777777777778}) - x23*(x114 + x173);
auto x17 = -x22*(V{0.0138888888888889}*x119*x63 + V{0.0277777777777778}) - x23*(x176 + x64);
auto x18 = -x22*(-V{0.0138888888888889}*x119*x70 + V{0.0277777777777778}) - x23*(x177 + x71);
cell[0] = x0;
cell[1] = x1;
cell[2] = x2;
cell[3] = x3;
cell[4] = x4;
cell[5] = x5;
cell[6] = x6;
cell[7] = x7;
cell[8] = x8;
cell[9] = x9;
cell[10] = x10;
cell[11] = x11;
cell[12] = x12;
cell[13] = x13;
cell[14] = x14;
cell[15] = x15;
cell[16] = x16;
cell[17] = x17;
cell[18] = x18;
return { -V{0.5}*x119, x34 + x35 + x36 };
}
};

}

}
