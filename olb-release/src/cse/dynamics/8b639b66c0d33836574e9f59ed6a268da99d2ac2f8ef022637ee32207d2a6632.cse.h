/*  This file is part of the OpenLB library
 *
 *  Copyright (C) 2021-24 Adrian Kummerlaender, Shota Ito
 *  E-mail contact: info@openlb.net
 *  The most recent release of OpenLB can be downloaded at
 *  <http://www.openlb.net/>
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public
 *  License along with this program; if not, write to the Free
 *  Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA  02110-1301, USA.
*/

/*  ========================================================
 *  ==  WARNING: This is an automatically generated file, ==
 *  ==                  do not modify.                    ==
 *  ========================================================
 */

#pragma once


namespace olb {

namespace dynamics {

template <typename T, typename... FIELDS>
struct CSE<CombinedRLBdynamics<T, descriptors::D3Q19<FIELDS...>, dynamics::Tuple<T, descriptors::D3Q19<FIELDS...>, momenta::Tuple<momenta::BulkDensity, momenta::BulkMomentum, momenta::BulkStress, momenta::DefineToNEq>, equilibria::SecondOrder, collision::BGK, dynamics::DefaultCombination>, momenta::Tuple<momenta::InnerEdgeDensity3D<1, 1, -1>, momenta::FixedVelocityMomentumGeneric, momenta::InnerEdgeStress3D<1, 1, -1>, momenta::DefineSeparately> >> {
template <concepts::Cell CELL, concepts::Parameters PARAMETERS, concepts::BaseType V=typename CELL::value_t>
CellStatistic<V> collide(CELL& cell, PARAMETERS& parameters) any_platform {
auto x19 = cell.template getFieldComponent<momenta::FixedVelocityMomentumGeneric::VELOCITY>(0);
auto x20 = cell.template getFieldComponent<momenta::FixedVelocityMomentumGeneric::VELOCITY>(1);
auto x22 = parameters.template get<descriptors::OMEGA>();
auto x21 = cell.template getFieldComponent<momenta::FixedVelocityMomentumGeneric::VELOCITY>(2);
auto x23 = x22 + V{-1};
auto x24 = V{0.5}*cell[12];
auto x25 = V{0.5}*cell[1];
auto x26 = V{2}*cell[7];
auto x27 = V{1} / (x19 + V{-1});
auto x28 = V{0.25}*cell[0] + V{0.25}*cell[11] + V{0.25}*cell[2] + V{0.5}*cell[7] + V{0.25};
auto x29 = V{1} / (x21 + V{1});
auto x30 = cell[0] + cell[11] + cell[2] + x26 + V{1};
auto x31 = cell[10] + V{2}*cell[12] + cell[13] + cell[14] + V{2}*cell[15] + V{2}*cell[17] + cell[1] + cell[4] + cell[5] + V{2}*cell[9] + x30;
auto x32 = cell[12] + cell[17] + cell[18] + V{2}*cell[1] + cell[3] + V{2}*cell[4] + V{2}*cell[5] + V{2}*cell[6] + cell[8] + cell[9] + x30;
auto x33 = -V{0.0138888888888889}*x27*x32 + V{0.0138888888888889}*x29*x31;
auto x34 = -x21;
auto x35 = x19 + x34;
auto x36 = -x35;
auto x37 = V{3}*x21;
auto x38 = -x37;
auto x39 = V{3}*x19;
auto x40 = x20*x20;
auto x41 = V{1.5}*x40;
auto x42 = x19*x19;
auto x43 = V{1.5}*x42;
auto x44 = x21*x21;
auto x45 = V{1.5}*x44;
auto x46 = x43 + x45 + V{-1};
auto x47 = x41 + x46;
auto x48 = x39 + x47;
auto x49 = x38 + x48;
auto x50 = x49 - V{4.5}*x36*x36;
auto x51 = x47*(-V{0.166666666666667}*x27*x32 + V{0.166666666666667}*x29*x31);
auto x52 = -V{0.25}*x27*x32 + V{0.25}*x29*x31;
auto x53 = -V{4.5}*x35*x35;
auto x54 = -x39 + x47;
auto x55 = x37 + x53 + x54;
auto x56 = x19 - x20;
auto x57 = -x56;
auto x58 = V{3}*x20;
auto x59 = -x58;
auto x60 = x48 + x59;
auto x61 = x60 - V{4.5}*x57*x57;
auto x62 = -V{0.0277777777777778}*x27*x32 + V{0.0277777777777778}*x29*x31;
auto x63 = x20 + x34;
auto x64 = -x63;
auto x65 = x47 + x58;
auto x66 = x38 + x65;
auto x67 = x66 - V{4.5}*x64*x64;
auto x68 = -V{0.0277777777777778}*x27*x32 + V{0.0277777777777778}*x29*x31;
auto x69 = V{3}*x42;
auto x70 = x41 + V{-1};
auto x71 = x39 + x45 - x69 + x70;
auto x72 = -x62*x71;
auto x73 = -x41;
auto x74 = V{1} - x45;
auto x75 = x73 + x74;
auto x76 = x39 + x75;
auto x77 = x69 + x76;
auto x78 = x62*x77;
auto x79 = x19 + x20;
auto x80 = V{4.5}*(x79*x79);
auto x81 = x48 + x58 - x80;
auto x82 = -x33*x81;
auto x83 = -x43;
auto x84 = x58 + x83;
auto x85 = x76 + x80 + x84;
auto x86 = x33*x85;
auto x87 = -V{4.5}*x56*x56;
auto x88 = x54 + x58 + x87;
auto x89 = -x33*x88;
auto x90 = x19 + x21;
auto x91 = V{4.5}*(x90*x90);
auto x92 = x37 + x83;
auto x93 = x76 + x91 + x92;
auto x94 = x20 + x21;
auto x95 = V{4.5}*(x94*x94);
auto x96 = x37 + x75 + x84 + x95;
auto x97 = -V{0.0555555555555556}*x27*x32 + V{0.0555555555555556}*x29*x31;
auto x98 = V{3}*x44;
auto x99 = x73 + x92 + x98 + V{1};
auto x100 = -V{5.55111512312578e-17}*x27*x32 + V{5.55111512312578e-17}*x29*x31;
auto x101 = -V{1.11022302462516e-16}*x27*x32 + V{1.11022302462516e-16}*x29*x31;
auto x102 = -V{8.32667268468867e-17}*x27*x32 + V{8.32667268468867e-17}*x29*x31;
auto x103 = V{3}*x40;
auto x104 = -x103 + x46 + x58;
auto x105 = -x104*x62;
auto x106 = x103 + x74 + x84;
auto x107 = x106*x62;
auto x108 = V{5.55111512312578e-17}*cell[0] + V{5.55111512312578e-17}*cell[11] + V{5.55111512312578e-17}*cell[2] + V{1.11022302462516e-16}*cell[7] + V{5.55111512312578e-17};
auto x109 = V{1.11022302462516e-16}*cell[12];
auto x110 = x105 + x107 + x27*(V{5.55111512312578e-17}*cell[12] + V{5.55111512312578e-17}*cell[17] + V{5.55111512312578e-17}*cell[18] + V{1.11022302462516e-16}*cell[1] + V{5.55111512312578e-17}*cell[3] + V{1.11022302462516e-16}*cell[4] + V{1.11022302462516e-16}*cell[5] + V{1.11022302462516e-16}*cell[6] + V{5.55111512312578e-17}*cell[8] + V{5.55111512312578e-17}*cell[9] + x108) - x29*(V{5.55111512312578e-17}*cell[10] + V{5.55111512312578e-17}*cell[13] + V{5.55111512312578e-17}*cell[14] + V{1.11022302462516e-16}*cell[15] + V{1.11022302462516e-16}*cell[17] + V{5.55111512312578e-17}*cell[1] + V{5.55111512312578e-17}*cell[4] + V{5.55111512312578e-17}*cell[5] + V{1.11022302462516e-16}*cell[9] + x108 + x109) - x51 + V{-2.22044604925031e-16};
auto x111 = V{1.66533453693773e-16}*cell[10] + V{1.11022302462516e-16}*cell[11] + V{2.22044604925031e-16}*cell[12] + V{4.44089209850063e-16}*cell[13] + V{4.9960036108132e-16}*cell[14] + V{3.33066907387547e-16}*cell[15] + V{2.22044604925031e-16}*cell[17] + V{1.66533453693773e-16}*cell[1] + V{1.11022302462516e-16}*cell[2] + V{2.22044604925031e-16}*cell[3] + V{4.44089209850063e-16}*cell[4] + V{4.9960036108132e-16}*cell[5] + V{3.33066907387547e-16}*cell[6] + V{6.66133814775094e-16}*cell[7] + V{2.22044604925031e-16}*cell[8] - x100*x40 - x101*x44 - x102*x42 + x110 - x55*(-V{4.62592926927149e-18}*x27*x32 + V{4.62592926927149e-18}*x29*x31) + x62*x93 + x62*x96 + x72 + x78 + x82 + x86 + x89 + x97*x99;
auto x112 = -V{0.0277777777777778}*x27*x32 + V{0.0277777777777778}*x29*x31;
auto x113 = x62*x99;
auto x114 = x37 + x65 - x95;
auto x115 = -x114*x33;
auto x116 = x33*x96;
auto x117 = -V{4.5}*x63*x63;
auto x118 = x117 + x37 + x47 + x59;
auto x119 = -x118*x33;
auto x120 = x37 + x43 + x70 - x98;
auto x121 = x120*x62;
auto x122 = x37 + x48 - x91;
auto x123 = V{2.22044604925031e-16}*cell[10] + V{1.66533453693773e-16}*cell[11] + V{3.33066907387547e-16}*cell[13] + V{3.33066907387547e-16}*cell[14] + V{4.44089209850063e-16}*cell[15] + V{4.71844785465692e-16}*cell[17] + V{5.27355936696949e-16}*cell[18] + V{2.22044604925031e-16}*cell[1] + V{1.66533453693773e-16}*cell[2] + V{1.11022302462516e-16}*cell[3] + V{3.33066907387547e-16}*cell[4] + V{3.33066907387547e-16}*cell[5] + V{4.44089209850063e-16}*cell[6] + V{4.44089209850063e-16}*cell[7] + V{4.71844785465692e-16}*cell[8] + V{5.27355936696949e-16}*cell[9] - x100*x44 - x101*x42 - x102*x40 + x109 + x110 + x113 + x115 + x116 + x119 - x121 - x122*x62 - x55*(-V{3.08395284618099e-18}*x27*x32 + V{3.08395284618099e-18}*x29*x31) - x62*x81 - x71*x97;
auto x124 = -x27*(-x112*x50 + x123 - x33*x67 - x61*x62) + x29*(x111 - x33*x61 - x50*x68 - x62*x67);
auto x125 = -V{0.00115740740740741}*x27*x32 + V{0.00115740740740741}*x29*x31;
auto x126 = x49 + x53;
auto x127 = -V{0.0833333333333333}*x27*x32 + V{0.0833333333333333}*x29*x31;
auto x128 = V{3.46944695195361e-18}*cell[0] + V{3.46944695195361e-18}*cell[11] + V{3.46944695195361e-18}*cell[2] + V{6.93889390390723e-18}*cell[7] + V{3.46944695195361e-18};
auto x129 = x27*(V{3.46944695195361e-18}*cell[12] + V{3.46944695195361e-18}*cell[17] + V{3.46944695195361e-18}*cell[18] + V{6.93889390390723e-18}*cell[1] + V{3.46944695195361e-18}*cell[3] + V{6.93889390390723e-18}*cell[4] + V{6.93889390390723e-18}*cell[5] + V{6.93889390390723e-18}*cell[6] + V{3.46944695195361e-18}*cell[8] + V{3.46944695195361e-18}*cell[9] + x128);
auto x130 = x29*(V{3.46944695195361e-18}*cell[10] + V{6.93889390390723e-18}*cell[12] + V{3.46944695195361e-18}*cell[13] + V{3.46944695195361e-18}*cell[14] + V{6.93889390390723e-18}*cell[15] + V{6.93889390390723e-18}*cell[17] + V{3.46944695195361e-18}*cell[1] + V{3.46944695195361e-18}*cell[4] + V{3.46944695195361e-18}*cell[5] + V{6.93889390390723e-18}*cell[9] + x128);
auto x131 = -x130;
auto x132 = -V{0.0416666666666667}*x27*x32 + V{0.0416666666666667}*x29*x31;
auto x133 = -V{0.0833333333333333}*cell[12] + V{0.0833333333333334}*cell[13] + V{0.0833333333333334}*cell[14] - V{0.0833333333333333}*cell[3] + V{0.0833333333333334}*cell[4] + V{0.0833333333333334}*cell[5] + x129 + x131 + x132*x44 + V{-0.0555555555555555};
auto x134 = V{0.0833333333333334}*cell[15];
auto x135 = V{0.0833333333333334}*cell[6];
auto x136 = V{0.166666666666667}*cell[7];
auto x137 = V{0.0833333333333333}*cell[11];
auto x138 = V{0.0833333333333333}*cell[2];
auto x139 = x132*x40;
auto x140 = x125*x55;
auto x141 = x134 + x135 + x136 - x137 - x138 + x139 - x140;
auto x142 = V{0.166666666666667}*cell[10] - V{0.166666666666667}*cell[17] - V{0.166666666666667}*cell[18] + V{0.166666666666667}*cell[1] - V{0.166666666666667}*cell[8] - V{0.166666666666667}*cell[9] + x125*x126 - x127*x42 + x133 + x141;
auto x143 = -V{0.00231481481481481}*x27*x32 + V{0.00231481481481481}*x29*x31;
auto x144 = V{0.0833333333333334}*cell[17];
auto x145 = V{0.0833333333333334}*cell[18];
auto x146 = V{0.0833333333333334}*cell[8];
auto x147 = V{0.0833333333333334}*cell[9];
auto x148 = V{0.0833333333333333}*cell[10];
auto x149 = V{0.0833333333333333}*cell[1];
auto x150 = x132*x42;
auto x151 = x144 + x145 + x146 + x147 - x148 - x149 + x150;
auto x152 = V{0.166666666666667}*cell[11] - V{0.166666666666667}*cell[15] + V{0.166666666666667}*cell[2] - V{0.166666666666667}*cell[6] - V{0.333333333333333}*cell[7] - x126*x143 - x127*x40 + x133 + x143*x55 + x151;
auto x153 = V{0.166666666666667}*cell[12];
auto x154 = V{0.166666666666667}*cell[3];
auto x155 = x125*x50;
auto x156 = -x27*x32 + x29*x31;
auto x157 = V{0.125}*x156*x19;
auto x158 = x157*x20;
auto x159 = -V{0.0208333333333333}*x27*x32 + V{0.0208333333333333}*x29*x31;
auto x160 = V{0.0208333333333333}*cell[0] + V{0.0208333333333333}*cell[11] + V{0.0208333333333333}*cell[2] + V{0.0416666666666667}*cell[7] + V{0.0208333333333333};
auto x161 = x27*(V{0.0208333333333333}*cell[12] + V{0.0208333333333333}*cell[17] + V{0.0208333333333333}*cell[18] + V{0.0416666666666667}*cell[1] + V{0.0208333333333333}*cell[3] + V{0.0416666666666667}*cell[4] + V{0.0416666666666667}*cell[5] + V{0.0416666666666667}*cell[6] + V{0.0208333333333333}*cell[8] + V{0.0208333333333333}*cell[9] + x160);
auto x162 = -x29*(V{0.0208333333333333}*cell[10] + V{0.0416666666666667}*cell[12] + V{0.0208333333333333}*cell[13] + V{0.0208333333333333}*cell[14] + V{0.0416666666666667}*cell[15] + V{0.0416666666666667}*cell[17] + V{0.0208333333333333}*cell[1] + V{0.0208333333333333}*cell[4] + V{0.0208333333333333}*cell[5] + V{0.0416666666666667}*cell[9] + x160);
auto x163 = -V{0.0416666666666667}*x27*x32 + V{0.0416666666666667}*x29*x31;
auto x164 = V{0.0833333333333333}*cell[10] + V{0.0416666666666667}*cell[17] + V{0.0416666666666667}*cell[18] + V{0.0833333333333333}*cell[1] + V{0.0416666666666667}*cell[8] + V{0.0416666666666667}*cell[9] + x161 + x162 - x163*x42 + V{0.0138888888888889};
auto x165 = -V{0.000578703703703704}*x27*x32 + V{0.000578703703703704}*x29*x31;
auto x166 = V{0.0833333333333333}*cell[11] + V{0.0416666666666667}*cell[15] + V{0.0833333333333333}*cell[2] + V{0.0416666666666667}*cell[6] + V{0.0833333333333334}*cell[7] + x126*x165 - x163*x40 - x165*x55;
auto x167 = -V{0.0416666666666667}*cell[12] - V{0.0416666666666667}*cell[3] + x159*x44 + x164 + x166;
auto x168 = V{0.416666666666667}*cell[13] - V{0.0833333333333333}*cell[14] + V{0.416666666666667}*cell[4] - V{0.0833333333333333}*cell[5] - x158 + x167;
auto x169 = x60 + x87;
auto x170 = -x169*x33;
auto x171 = -V{0.0833333333333333}*cell[13] + V{0.416666666666667}*cell[14] - V{0.0833333333333333}*cell[4] + V{0.416666666666667}*cell[5] + x158 + x167;
auto x172 = -V{0.00115740740740741}*x27*x32 + V{0.00115740740740741}*x29*x31;
auto x173 = x157*x21;
auto x174 = V{0.0833333333333333}*cell[12] + V{0.0416666666666667}*cell[13] + V{0.0416666666666667}*cell[14] + V{0.0833333333333333}*cell[3] + V{0.0416666666666667}*cell[4] + V{0.0416666666666667}*cell[5] - x163*x44;
auto x175 = -V{0.0416666666666667}*cell[11] - V{0.0416666666666667}*cell[2] + x159*x40 + x164 + x174;
auto x176 = V{0.416666666666667}*cell[15] + V{0.416666666666667}*cell[6] - V{0.166666666666667}*cell[7] - x126*x172 + x172*x55 - x173 + x175;
auto x177 = -V{0.00578703703703704}*x27*x32 + V{0.00578703703703704}*x29*x31;
auto x178 = -V{0.0833333333333333}*cell[15] - V{0.0833333333333333}*cell[6] + V{0.833333333333333}*cell[7] + x173 + x175;
auto x179 = V{0.125}*x156*x20*x21;
auto x180 = -V{0.0416666666666667}*cell[10] - V{0.0416666666666667}*cell[1] + x159*x42 + x161 + x162 + x166 + x174 + V{0.0138888888888889};
auto x181 = V{0.416666666666667}*cell[17] - V{0.0833333333333333}*cell[18] + V{0.416666666666667}*cell[8] - V{0.0833333333333333}*cell[9] - x179 + x180;
auto x182 = x117 + x66;
auto x183 = -x182*x33;
auto x184 = -V{0.0833333333333333}*cell[17] + V{0.416666666666667}*cell[18] - V{0.0833333333333333}*cell[8] + V{0.416666666666667}*cell[9] + x179 + x180;
auto x185 = -x27*(-x112*x126 + x123 - x169*x62 + x183) + x29*(x111 - x126*x68 + x170 - x182*x62);
auto x0 = -x22*(V{0.166666666666667}*x124*x47 + V{0.333333333333333}) + x23*(V{0.5}*cell[10] + V{0.5}*cell[11] + V{1}*cell[13] + V{1}*cell[14] + V{1}*cell[15] + V{1}*cell[17] + V{1}*cell[18] + V{0.5}*cell[2] + V{0.5}*cell[3] + V{1}*cell[4] + V{1}*cell[5] + V{1}*cell[6] + V{1}*cell[8] + V{1}*cell[9] + x24 + x25 + x26 + x27*(V{0.25}*cell[12] + V{0.25}*cell[17] + V{0.25}*cell[18] + V{0.25}*cell[3] + V{0.5}*cell[4] + V{0.5}*cell[5] + V{0.5}*cell[6] + V{0.25}*cell[8] + V{0.25}*cell[9] + x25 + x28) - x29*(V{0.25}*cell[10] + V{0.25}*cell[13] + V{0.25}*cell[14] + V{0.5}*cell[15] + V{0.5}*cell[17] + V{0.25}*cell[1] + V{0.25}*cell[4] + V{0.25}*cell[5] + V{0.5}*cell[9] + x24 + x28) + x33*x50 - x33*x55 - x40*x52 - x42*x52 - x44*x52 + x51 + V{0.833333333333333});
auto x1 = -x22*(V{0.0277777777777778}*x124*x71 + V{0.0555555555555556}) - x23*(x142 + x72);
auto x2 = -x22*(V{0.0277777777777778}*x104*x124 + V{0.0555555555555556}) - x23*(x105 + x152);
auto x3 = -x22*(V{0.0277777777777778}*x120*x124 + V{0.0555555555555556}) + x23*(V{0.166666666666667}*cell[13] + V{0.166666666666667}*cell[14] + V{0.166666666666667}*cell[4] + V{0.166666666666667}*cell[5] + x121 + x127*x44 - x129 + x130 - x134 - x135 - x136 + x137 + x138 - x139 + x140 - x144 - x145 - x146 - x147 + x148 + x149 - x150 - x153 - x154 - x155 + V{0.0555555555555555});
auto x4 = -x22*(V{0.0138888888888889}*x124*x81 + V{0.0277777777777778}) - x23*(x168 + x82);
auto x5 = -x22*(V{0.0138888888888889}*x124*x61 + V{0.0277777777777778}) - x23*(x170 + x171);
auto x6 = -x22*(V{0.0138888888888889}*x122*x124 + V{0.0277777777777778}) - x23*(-x122*x33 + x176);
auto x7 = -x22*(V{0.0138888888888889}*x124*x50 + V{0.0277777777777778}) - x23*(-x126*(-V{0.00810185185185185}*x27*x32 + V{0.00810185185185185}*x29*x31) - x177*x55 + x178);
auto x8 = -x22*(V{0.0138888888888889}*x114*x124 + V{0.0277777777777778}) - x23*(x115 + x181);
auto x9 = -x22*(V{0.0138888888888889}*x124*x67 + V{0.0277777777777778}) - x23*(x183 + x184);
auto x10 = x22*(V{0.0277777777777778}*x185*x77 + V{-0.0555555555555556}) - x23*(x142 + x78);
auto x11 = x22*(V{0.0277777777777778}*x106*x185 + V{-0.0555555555555556}) - x23*(x107 + x152);
auto x12 = x22*(V{0.0277777777777778}*x185*x99 + V{-0.0555555555555556}) + x23*(V{0.166666666666667}*cell[13] + V{0.166666666666667}*cell[14] + V{0.166666666666667}*cell[4] + V{0.166666666666667}*cell[5] - x113 - x129 - x131 - x141 - x151 - x153 - x154 - x155 + V{0.0833333333333333}*x156*x44 + V{0.0555555555555555});
auto x13 = x22*(V{0.0138888888888889}*x185*x85 + V{-0.0277777777777778}) - x23*(x168 + x86);
auto x14 = -x22*(V{0.0138888888888889}*x124*x88 + V{0.0277777777777778}) - x23*(x171 + x89);
auto x15 = x22*(V{0.0138888888888889}*x185*x93 + V{-0.0277777777777778}) - x23*(x176 + x33*x93);
auto x16 = -x22*(V{0.0138888888888889}*x124*x55 + V{0.0277777777777778}) - x23*(x126*x177 + x178 - x55*(-V{0.0196759259259259}*x27*x32 + V{0.0196759259259259}*x29*x31));
auto x17 = x22*(V{0.0138888888888889}*x185*x96 + V{-0.0277777777777778}) - x23*(x116 + x181);
auto x18 = -x22*(V{0.0138888888888889}*x118*x124 + V{0.0277777777777778}) - x23*(x119 + x184);
cell[0] = x0;
cell[1] = x1;
cell[2] = x2;
cell[3] = x3;
cell[4] = x4;
cell[5] = x5;
cell[6] = x6;
cell[7] = x7;
cell[8] = x8;
cell[9] = x9;
cell[10] = x10;
cell[11] = x11;
cell[12] = x12;
cell[13] = x13;
cell[14] = x14;
cell[15] = x15;
cell[16] = x16;
cell[17] = x17;
cell[18] = x18;
return { V{0.5}*x185, x40 + x42 + x44 };
}
};

}

}
