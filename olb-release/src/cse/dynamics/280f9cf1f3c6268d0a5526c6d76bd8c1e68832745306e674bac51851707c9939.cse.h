/*  This file is part of the OpenLB library
 *
 *  Copyright (C) 2021-24 Adrian Kummerlaender, Shota Ito
 *  E-mail contact: info@openlb.net
 *  The most recent release of OpenLB can be downloaded at
 *  <http://www.openlb.net/>
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public
 *  License along with this program; if not, write to the Free
 *  Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA  02110-1301, USA.
*/

/*  ========================================================
 *  ==  WARNING: This is an automatically generated file, ==
 *  ==                  do not modify.                    ==
 *  ========================================================
 */

#pragma once


namespace olb {

namespace dynamics {

template <typename T, typename... FIELDS>
struct CSE<CombinedRLBdynamics<T, descriptors::D3Q19<FIELDS...>, dynamics::Tuple<T, descriptors::D3Q19<FIELDS...>, momenta::Tuple<momenta::BulkDensity, momenta::BulkMomentum, momenta::BulkStress, momenta::DefineToNEq>, equilibria::SecondOrder, collision::BGK, dynamics::DefaultCombination>, momenta::Tuple<momenta::InnerCornerDensity3D<1, 1, 1>, momenta::FixedVelocityMomentumGeneric, momenta::InnerCornerStress3D<1, 1, 1>, momenta::DefineSeparately> >> {
template <concepts::Cell CELL, concepts::Parameters PARAMETERS, concepts::BaseType V=typename CELL::value_t>
CellStatistic<V> collide(CELL& cell, PARAMETERS& parameters) any_platform {
auto x20 = cell.template getFieldComponent<momenta::FixedVelocityMomentumGeneric::VELOCITY>(1);
auto x22 = parameters.template get<descriptors::OMEGA>();
auto x21 = cell.template getFieldComponent<momenta::FixedVelocityMomentumGeneric::VELOCITY>(2);
auto x19 = cell.template getFieldComponent<momenta::FixedVelocityMomentumGeneric::VELOCITY>(0);
auto x23 = x22 + V{-1};
auto x24 = V{1} / (x19 + V{1});
auto x25 = V{0.166666666666667}*cell[17];
auto x26 = V{0.166666666666667}*cell[18];
auto x27 = V{0.166666666666667}*cell[8];
auto x28 = V{0.166666666666667}*cell[9];
auto x29 = x25 + x26 + x27 + x28;
auto x30 = V{0.166666666666667}*cell[0];
auto x31 = V{0.166666666666667}*cell[12] + V{0.333333333333333}*cell[13] + V{0.166666666666667}*cell[3] + x30 + V{0.166666666666667};
auto x32 = V{0.166666666666667}*cell[11] + V{0.333333333333333}*cell[15] + V{0.166666666666667}*cell[2];
auto x33 = V{1} / (x20 + V{1});
auto x34 = V{0.166666666666667}*cell[10] + V{0.333333333333333}*cell[17] + V{0.166666666666667}*cell[1];
auto x35 = V{0.166666666666667}*cell[15] + V{0.166666666666667}*cell[16] + V{0.166666666666667}*cell[6] + V{0.166666666666667}*cell[7];
auto x36 = V{1} / (x21 + V{1});
auto x37 = V{0.166666666666667}*cell[13] + V{0.166666666666667}*cell[14] + V{0.166666666666667}*cell[4] + V{0.166666666666667}*cell[5];
auto x38 = cell[0] + cell[12] + V{2}*cell[13] + cell[3] + V{1};
auto x39 = cell[11] + V{2}*cell[15] + cell[2];
auto x40 = V{2}*cell[10] + V{2}*cell[14] + V{2}*cell[16] + cell[17] + cell[18] + cell[8] + cell[9] + x38 + x39;
auto x41 = cell[10] + V{2}*cell[17] + cell[1];
auto x42 = V{2}*cell[11] + cell[15] + cell[16] + V{2}*cell[18] + V{2}*cell[5] + cell[6] + cell[7] + x38 + x41;
auto x43 = cell[0] + V{2}*cell[12] + cell[13] + cell[14] + cell[4] + cell[5] + V{2}*cell[7] + V{2}*cell[9] + x39 + x41 + V{1};
auto x44 = x21*x21;
auto x45 = V{1.5}*x44;
auto x46 = x19*x19;
auto x47 = V{1.5}*x46;
auto x48 = x20*x20;
auto x49 = V{1.5}*x48;
auto x50 = x47 + x49 + V{-1};
auto x51 = x45 + x50;
auto x52 = x51*(V{0.111111111111111}*x24*x40 + V{0.111111111111111}*x33*x42 + V{0.111111111111111}*x36*x43);
auto x53 = V{0.166666666666667}*x24*x40 + V{0.166666666666667}*x33*x42 + V{0.166666666666667}*x36*x43;
auto x54 = V{0.00925925925925926}*x24*x40 + V{0.00925925925925926}*x33*x42 + V{0.00925925925925926}*x36*x43;
auto x55 = -x21;
auto x56 = x20 + x55;
auto x57 = -x56;
auto x58 = V{3}*x21;
auto x59 = -x58;
auto x60 = V{3}*x20;
auto x61 = x51 + x60;
auto x62 = x59 + x61;
auto x63 = x62 - V{4.5}*x57*x57;
auto x64 = x20 + x21;
auto x65 = V{4.5}*(x64*x64);
auto x66 = x58 + x61 - x65;
auto x67 = -x54*x66;
auto x68 = -x45;
auto x69 = V{1} - x47;
auto x70 = x68 + x69;
auto x71 = x60 + x70;
auto x72 = -x49;
auto x73 = x58 + x72;
auto x74 = x65 + x71 + x73;
auto x75 = x54*x74;
auto x76 = -x60;
auto x77 = -V{4.5}*x56*x56;
auto x78 = x51 + x58;
auto x79 = x76 + x77 + x78;
auto x80 = -x54*x79;
auto x81 = V{0.037037037037037}*x24*x40 + V{0.037037037037037}*x33*x42 + V{0.037037037037037}*x36*x43;
auto x82 = V{3}*x46;
auto x83 = V{3}*x19;
auto x84 = x72 + x83;
auto x85 = x68 + x82 + x84 + V{1};
auto x86 = V{5.55111512312578e-17}*x24*x40 + V{5.55111512312578e-17}*x33*x42 + V{5.55111512312578e-17}*x36*x43;
auto x87 = V{0.0185185185185185}*x24*x40 + V{0.0185185185185185}*x33*x42 + V{0.0185185185185185}*x36*x43;
auto x88 = -x83;
auto x89 = x19 - x20;
auto x90 = -V{4.5}*x89*x89;
auto x91 = x61 + x88 + x90;
auto x92 = x19 + x55;
auto x93 = -V{4.5}*x92*x92;
auto x94 = x78 + x88 + x93;
auto x95 = V{7.40148683083438e-17}*x24*x40 + V{7.40148683083438e-17}*x33*x42 + V{7.40148683083438e-17}*x36*x43;
auto x96 = V{5.55111512312578e-17}*cell[0];
auto x97 = V{5.55111512312578e-17}*cell[12] + V{1.11022302462516e-16}*cell[13] + V{5.55111512312578e-17}*cell[3] + x96 + V{5.55111512312578e-17};
auto x98 = V{5.55111512312578e-17}*cell[11] + V{1.11022302462516e-16}*cell[15] + V{5.55111512312578e-17}*cell[2];
auto x99 = -x24*(V{1.11022302462516e-16}*cell[10] + V{1.11022302462516e-16}*cell[14] + V{1.11022302462516e-16}*cell[16] + V{5.55111512312578e-17}*cell[17] + V{5.55111512312578e-17}*cell[18] + V{5.55111512312578e-17}*cell[8] + V{5.55111512312578e-17}*cell[9] + x97 + x98);
auto x100 = V{1.11022302462516e-16}*cell[11];
auto x101 = V{5.55111512312578e-17}*cell[10] + V{1.11022302462516e-16}*cell[17] + V{5.55111512312578e-17}*cell[1];
auto x102 = -x33*(V{5.55111512312578e-17}*cell[15] + V{5.55111512312578e-17}*cell[16] + V{1.11022302462516e-16}*cell[18] + V{1.11022302462516e-16}*cell[5] + V{5.55111512312578e-17}*cell[6] + V{5.55111512312578e-17}*cell[7] + x100 + x101 + x97);
auto x103 = V{1.11022302462516e-16}*cell[12];
auto x104 = -x36*(V{5.55111512312578e-17}*cell[13] + V{5.55111512312578e-17}*cell[14] + V{5.55111512312578e-17}*cell[4] + V{5.55111512312578e-17}*cell[5] + V{1.11022302462516e-16}*cell[7] + V{1.11022302462516e-16}*cell[9] + x101 + x103 + x96 + x98 + V{5.55111512312578e-17});
auto x105 = V{3}*x48;
auto x106 = x105 + x71;
auto x107 = x106*x87;
auto x108 = x19 + x21;
auto x109 = V{4.5}*(x108*x108);
auto x110 = x109 + x70 + x73 + x83;
auto x111 = x45 + V{-1};
auto x112 = -x105 + x111 + x47 + x60;
auto x113 = x112*x87;
auto x114 = -x52;
auto x115 = x102 + x104 + x107 + x110*x87 - x113 + x114 + x99 + V{-2.22044604925031e-16};
auto x116 = V{3}*x44;
auto x117 = x116 + x69 + x73;
auto x118 = x117*x87;
auto x119 = x19 + x20;
auto x120 = V{4.5}*(x119*x119);
auto x121 = x120 + x71 + x84;
auto x122 = -x116 + x50 + x58;
auto x123 = x122*x87;
auto x124 = V{3.70074341541719e-17}*x24*x40 + V{3.70074341541719e-17}*x33*x42 + V{3.70074341541719e-17}*x36*x43;
auto x125 = V{3.33066907387547e-16}*cell[13] + V{3.33066907387547e-16}*cell[14] + V{1.11022302462516e-16}*cell[3] + V{3.33066907387547e-16}*cell[4] + V{3.33066907387547e-16}*cell[5] + x103 + x118 + x121*x87 - x123 - x124*x44;
auto x126 = V{2.22044604925031e-16}*cell[10] + V{1.66533453693773e-16}*cell[11] + V{4.44089209850063e-16}*cell[15] + V{2.22044604925031e-16}*cell[16] + V{4.71844785465692e-16}*cell[17] + V{5.27355936696949e-16}*cell[18] + V{2.22044604925031e-16}*cell[1] + V{1.66533453693773e-16}*cell[2] + V{4.44089209850063e-16}*cell[6] + V{2.22044604925031e-16}*cell[7] + V{4.71844785465692e-16}*cell[8] + V{5.27355936696949e-16}*cell[9] + x115 + x125 - x46*x95 - x48*x86 + x67 + x75 + x80 + x81*x85 - x87*x91 - x87*x94;
auto x127 = -x92;
auto x128 = x51 + x83;
auto x129 = x128 + x59;
auto x130 = x129 - V{4.5}*x127*x127;
auto x131 = -x89;
auto x132 = x128 + x76;
auto x133 = x132 - V{4.5}*x131*x131;
auto x134 = -x109 + x78 + x83;
auto x135 = -x134*x54;
auto x136 = x110*x54;
auto x137 = -x54*x94;
auto x138 = x85*x87;
auto x139 = x111 + x49 - x82 + x83;
auto x140 = x139*x87;
auto x141 = V{1.66533453693773e-16}*cell[10] + V{1.66533453693773e-16}*cell[1] + x138 - x140 - x46*x86 + x74*x87;
auto x142 = V{2.22044604925031e-16}*cell[11] + V{4.71844785465692e-16}*cell[15] + V{5.27355936696949e-16}*cell[16] + V{4.44089209850063e-16}*cell[17] + V{2.22044604925031e-16}*cell[18] + V{2.22044604925031e-16}*cell[2] + V{4.71844785465692e-16}*cell[6] + V{5.27355936696949e-16}*cell[7] + V{4.44089209850063e-16}*cell[8] + V{2.22044604925031e-16}*cell[9] + x102 + x104 + x106*x81 + x114 + x125 + x135 + x136 + x137 + x141 - x48*x95 - x79*x87 + x99 + V{-2.22044604925031e-16};
auto x143 = -x120 + x61 + x83;
auto x144 = -x143*x54;
auto x145 = x121*x54;
auto x146 = -x54*x91;
auto x147 = V{2.22044604925031e-16}*cell[12] + V{4.44089209850063e-16}*cell[13] + V{4.9960036108132e-16}*cell[14] + V{3.33066907387547e-16}*cell[15] + V{3.33066907387547e-16}*cell[16] + V{2.22044604925031e-16}*cell[17] + V{1.11022302462516e-16}*cell[2] + V{2.22044604925031e-16}*cell[3] + V{4.44089209850063e-16}*cell[4] + V{4.9960036108132e-16}*cell[5] + V{3.33066907387547e-16}*cell[6] + V{3.33066907387547e-16}*cell[7] + V{2.22044604925031e-16}*cell[8] + x100 + x115 + x117*x81 - x124*x48 + x141 + x144 + x145 + x146 - x44*x95;
auto x148 = x24*(x126 - x54*x63) + x33*(-x130*x54 - x133*x87 + x142) + x36*(-x130*x87 - x133*x54 + x147 - x63*x87);
auto x149 = V{0.166666666666667}*cell[10];
auto x150 = V{0.166666666666667}*cell[1];
auto x151 = V{0.0555555555555556}*x24*x40 + V{0.0555555555555556}*x33*x42 + V{0.0555555555555556}*x36*x43;
auto x152 = x151*x46;
auto x153 = V{0.0833333333333333}*cell[12];
auto x154 = V{0.0833333333333333}*cell[3];
auto x155 = V{0.0833333333333334}*cell[13];
auto x156 = V{0.0833333333333334}*cell[14];
auto x157 = V{0.0833333333333334}*cell[4];
auto x158 = V{0.0833333333333334}*cell[5];
auto x159 = V{3.46944695195361e-18}*cell[0];
auto x160 = V{3.46944695195361e-18}*cell[12] + V{6.93889390390723e-18}*cell[13] + V{3.46944695195361e-18}*cell[3] + x159 + V{3.46944695195361e-18};
auto x161 = V{3.46944695195361e-18}*cell[11] + V{6.93889390390723e-18}*cell[15] + V{3.46944695195361e-18}*cell[2];
auto x162 = x24*(V{6.93889390390723e-18}*cell[10] + V{6.93889390390723e-18}*cell[14] + V{6.93889390390723e-18}*cell[16] + V{3.46944695195361e-18}*cell[17] + V{3.46944695195361e-18}*cell[18] + V{3.46944695195361e-18}*cell[8] + V{3.46944695195361e-18}*cell[9] + x160 + x161);
auto x163 = V{3.46944695195361e-18}*cell[10] + V{6.93889390390723e-18}*cell[17] + V{3.46944695195361e-18}*cell[1];
auto x164 = x33*(V{6.93889390390723e-18}*cell[11] + V{3.46944695195361e-18}*cell[15] + V{3.46944695195361e-18}*cell[16] + V{6.93889390390723e-18}*cell[18] + V{6.93889390390723e-18}*cell[5] + V{3.46944695195361e-18}*cell[6] + V{3.46944695195361e-18}*cell[7] + x160 + x163);
auto x165 = x36*(V{6.93889390390723e-18}*cell[12] + V{3.46944695195361e-18}*cell[13] + V{3.46944695195361e-18}*cell[14] + V{3.46944695195361e-18}*cell[4] + V{3.46944695195361e-18}*cell[5] + V{6.93889390390723e-18}*cell[7] + V{6.93889390390723e-18}*cell[9] + x159 + x161 + x163 + V{3.46944695195361e-18});
auto x166 = V{0.0277777777777778}*x24*x40 + V{0.0277777777777778}*x33*x42 + V{0.0277777777777778}*x36*x43;
auto x167 = x166*x44;
auto x168 = x153 + x154 - x155 - x156 - x157 - x158 + x162 + x164 + x165 - x167 + V{0.0555555555555555};
auto x169 = V{0.0833333333333333}*cell[11];
auto x170 = V{0.0833333333333333}*cell[2];
auto x171 = V{0.0833333333333334}*cell[15];
auto x172 = V{0.0833333333333334}*cell[16];
auto x173 = V{0.0833333333333334}*cell[6];
auto x174 = V{0.0833333333333334}*cell[7];
auto x175 = x166*x48;
auto x176 = x169 + x170 - x171 - x172 - x173 - x174 - x175;
auto x177 = V{0.0833333333333333}*cell[10] - V{0.0833333333333334}*cell[17] - V{0.0833333333333334}*cell[18] + V{0.0833333333333333}*cell[1] - V{0.0833333333333334}*cell[8] - V{0.0833333333333334}*cell[9] - x166*x46;
auto x178 = -V{0.166666666666667}*cell[11] - V{0.166666666666667}*cell[2] + x151*x48 + x168 + x177 + x35;
auto x179 = -V{0.166666666666667}*cell[12] - V{0.166666666666667}*cell[3] + x151*x44 + x162 + x164 + x165 + x176 + x177 + x37 + V{0.0555555555555555};
auto x180 = x24*x40 + x33*x42 + x36*x43;
auto x181 = V{0.0833333333333333}*x180*x19;
auto x182 = x181*x20;
auto x183 = V{0.0138888888888889}*x24*x40 + V{0.0138888888888889}*x33*x42 + V{0.0138888888888889}*x36*x43;
auto x184 = V{0.0138888888888889}*cell[0];
auto x185 = V{0.0138888888888889}*cell[12] + V{0.0277777777777778}*cell[13] + V{0.0138888888888889}*cell[3] + x184 + V{0.0138888888888889};
auto x186 = V{0.0138888888888889}*cell[11] + V{0.0277777777777778}*cell[15] + V{0.0138888888888889}*cell[2];
auto x187 = -x24*(V{0.0277777777777778}*cell[10] + V{0.0277777777777778}*cell[14] + V{0.0277777777777778}*cell[16] + V{0.0138888888888889}*cell[17] + V{0.0138888888888889}*cell[18] + V{0.0138888888888889}*cell[8] + V{0.0138888888888889}*cell[9] + x185 + x186);
auto x188 = V{0.0138888888888889}*cell[10] + V{0.0277777777777778}*cell[17] + V{0.0138888888888889}*cell[1];
auto x189 = -x33*(V{0.0277777777777778}*cell[11] + V{0.0138888888888889}*cell[15] + V{0.0138888888888889}*cell[16] + V{0.0277777777777778}*cell[18] + V{0.0277777777777778}*cell[5] + V{0.0138888888888889}*cell[6] + V{0.0138888888888889}*cell[7] + x185 + x188);
auto x190 = -x36*(V{0.0277777777777778}*cell[12] + V{0.0138888888888889}*cell[13] + V{0.0138888888888889}*cell[14] + V{0.0138888888888889}*cell[4] + V{0.0138888888888889}*cell[5] + V{0.0277777777777778}*cell[7] + V{0.0277777777777778}*cell[9] + x184 + x186 + x188 + V{0.0138888888888889});
auto x191 = V{0.0277777777777778}*x24*x40 + V{0.0277777777777778}*x33*x42 + V{0.0277777777777778}*x36*x43;
auto x192 = V{0.0833333333333333}*cell[10] + V{0.0416666666666667}*cell[17] + V{0.0416666666666667}*cell[18] + V{0.0833333333333333}*cell[1] + V{0.0416666666666667}*cell[8] + V{0.0416666666666667}*cell[9] + x187 + x189 + x190 - x191*x46 + V{0.0138888888888889};
auto x193 = V{0.0833333333333333}*cell[11] + V{0.0416666666666667}*cell[15] + V{0.0416666666666667}*cell[16] + V{0.0833333333333333}*cell[2] + V{0.0416666666666667}*cell[6] + V{0.0416666666666667}*cell[7] - x191*x48;
auto x194 = -V{0.0416666666666667}*cell[12] - V{0.0416666666666667}*cell[3] + x183*x44 + x192 + x193;
auto x195 = V{0.416666666666667}*cell[13] - V{0.0833333333333333}*cell[14] + V{0.416666666666667}*cell[4] - V{0.0833333333333333}*cell[5] - x182 + x194;
auto x196 = x132 + x90;
auto x197 = -x196*x54;
auto x198 = -V{0.0833333333333333}*cell[13] + V{0.416666666666667}*cell[14] - V{0.0833333333333333}*cell[4] + V{0.416666666666667}*cell[5] + x182 + x194;
auto x199 = x181*x21;
auto x200 = V{0.0833333333333333}*cell[12] + V{0.0416666666666667}*cell[13] + V{0.0416666666666667}*cell[14] + V{0.0833333333333333}*cell[3] + V{0.0416666666666667}*cell[4] + V{0.0416666666666667}*cell[5] - x191*x44;
auto x201 = -V{0.0416666666666667}*cell[11] - V{0.0416666666666667}*cell[2] + x183*x48 + x192 + x200;
auto x202 = V{0.416666666666667}*cell[15] - V{0.0833333333333333}*cell[16] + V{0.416666666666667}*cell[6] - V{0.0833333333333333}*cell[7] - x199 + x201;
auto x203 = x129 + x93;
auto x204 = -x203*x54;
auto x205 = -V{0.0833333333333333}*cell[15] + V{0.416666666666667}*cell[16] - V{0.0833333333333333}*cell[6] + V{0.416666666666667}*cell[7] + x199 + x201;
auto x206 = V{0.0833333333333333}*x180*x20*x21;
auto x207 = -V{0.0416666666666667}*cell[10] - V{0.0416666666666667}*cell[1] + x183*x46 + x187 + x189 + x190 + x193 + x200 + V{0.0138888888888889};
auto x208 = V{0.416666666666667}*cell[17] - V{0.0833333333333333}*cell[18] + V{0.416666666666667}*cell[8] - V{0.0833333333333333}*cell[9] - x206 + x207;
auto x209 = x62 + x77;
auto x210 = -x209*x54;
auto x211 = -V{0.0833333333333333}*cell[17] + V{0.416666666666667}*cell[18] - V{0.0833333333333333}*cell[8] + V{0.416666666666667}*cell[9] + x206 + x207;
auto x212 = x24*(x126 + x210) + x33*(x142 - x196*x87 + x204) + x36*(x147 + x197 - x203*x87 - x209*x87);
auto x0 = -x22*(V{0.111111111111111}*x148*x51 + V{0.333333333333333}) + x23*(V{0.5}*cell[10] + V{0.5}*cell[11] + V{0.5}*cell[12] + V{1}*cell[13] + V{1}*cell[14] + V{1}*cell[15] + V{1}*cell[16] + V{1}*cell[17] + V{1}*cell[18] + V{0.5}*cell[1] + V{0.5}*cell[2] + V{0.5}*cell[3] + V{1}*cell[4] + V{1}*cell[5] + V{1}*cell[6] + V{1}*cell[7] + V{1}*cell[8] + V{1}*cell[9] - x24*(V{0.333333333333333}*cell[10] + V{0.333333333333333}*cell[14] + V{0.333333333333333}*cell[16] + x29 + x31 + x32) - x33*(V{0.333333333333333}*cell[11] + V{0.333333333333333}*cell[18] + V{0.333333333333333}*cell[5] + x31 + x34 + x35) - x36*(V{0.333333333333333}*cell[12] + V{0.333333333333333}*cell[7] + V{0.333333333333333}*cell[9] + x30 + x32 + x34 + x37 + V{0.166666666666667}) - x44*x53 - x46*x53 - x48*x53 + x52 + V{0.833333333333333});
auto x1 = -x22*(V{0.0185185185185185}*x139*x148 + V{0.0555555555555556}) + x23*(x140 - x149 - x150 + x152 + x168 + x176 + x29);
auto x2 = -x22*(V{0.0185185185185185}*x112*x148 + V{0.0555555555555556}) + x23*(x113 + x178);
auto x3 = -x22*(V{0.0185185185185185}*x122*x148 + V{0.0555555555555556}) + x23*(x123 + x179);
auto x4 = -x22*(V{0.00925925925925926}*x143*x148 + V{0.0277777777777778}) - x23*(x144 + x195);
auto x5 = -x22*(V{0.00925925925925926}*x133*x148 + V{0.0277777777777778}) - x23*(x197 + x198);
auto x6 = -x22*(V{0.00925925925925926}*x134*x148 + V{0.0277777777777778}) - x23*(x135 + x202);
auto x7 = -x22*(V{0.00925925925925926}*x130*x148 + V{0.0277777777777778}) - x23*(x204 + x205);
auto x8 = -x22*(V{0.00925925925925926}*x148*x66 + V{0.0277777777777778}) - x23*(x208 + x67);
auto x9 = -x22*(V{0.00925925925925926}*x148*x63 + V{0.0277777777777778}) - x23*(x210 + x211);
auto x10 = x22*(V{0.0185185185185185}*x212*x85 + V{-0.0555555555555556}) - x23*(x138 + x149 + x150 - x152 - x153 - x154 + x155 + x156 + x157 + x158 - x162 - x164 - x165 + x167 - x169 - x170 + x171 + x172 + x173 + x174 + x175 - x25 - x26 - x27 - x28 + V{-0.0555555555555555});
auto x11 = x22*(V{0.0185185185185185}*x106*x212 + V{-0.0555555555555556}) + x23*(-x107 + x178);
auto x12 = x22*(V{0.0185185185185185}*x117*x212 + V{-0.0555555555555556}) + x23*(-x118 + x179);
auto x13 = x22*(V{0.00925925925925926}*x121*x212 + V{-0.0277777777777778}) - x23*(x145 + x195);
auto x14 = -x22*(V{0.00925925925925926}*x148*x91 + V{0.0277777777777778}) - x23*(x146 + x198);
auto x15 = x22*(V{0.00925925925925926}*x110*x212 + V{-0.0277777777777778}) - x23*(x136 + x202);
auto x16 = -x22*(V{0.00925925925925926}*x148*x94 + V{0.0277777777777778}) - x23*(x137 + x205);
auto x17 = x22*(V{0.00925925925925926}*x212*x74 + V{-0.0277777777777778}) - x23*(x208 + x75);
auto x18 = -x22*(V{0.00925925925925926}*x148*x79 + V{0.0277777777777778}) - x23*(x211 + x80);
cell[0] = x0;
cell[1] = x1;
cell[2] = x2;
cell[3] = x3;
cell[4] = x4;
cell[5] = x5;
cell[6] = x6;
cell[7] = x7;
cell[8] = x8;
cell[9] = x9;
cell[10] = x10;
cell[11] = x11;
cell[12] = x12;
cell[13] = x13;
cell[14] = x14;
cell[15] = x15;
cell[16] = x16;
cell[17] = x17;
cell[18] = x18;
return { V{0.333333333333333}*x212, x44 + x46 + x48 };
}
};

}

}
