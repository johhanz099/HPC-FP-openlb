/*  This file is part of the OpenLB library
 *
 *  Copyright (C) 2021-24 Adrian Kummerlaender, Shota Ito
 *  E-mail contact: info@openlb.net
 *  The most recent release of OpenLB can be downloaded at
 *  <http://www.openlb.net/>
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public
 *  License along with this program; if not, write to the Free
 *  Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA  02110-1301, USA.
*/

/*  ========================================================
 *  ==  WARNING: This is an automatically generated file, ==
 *  ==                  do not modify.                    ==
 *  ========================================================
 */

#pragma once


namespace olb {

namespace dynamics {

template <typename T, typename... FIELDS>
struct CSE<CombinedRLBdynamics<T, descriptors::D3Q19<FIELDS...>, dynamics::Tuple<T, descriptors::D3Q19<FIELDS...>, momenta::Tuple<momenta::BulkDensity, momenta::BulkMomentum, momenta::BulkStress, momenta::DefineToNEq>, equilibria::SecondOrder, collision::BGK, dynamics::DefaultCombination>, momenta::Tuple<momenta::InnerEdgeDensity3D<2, 1, -1>, momenta::FixedVelocityMomentumGeneric, momenta::InnerEdgeStress3D<2, 1, -1>, momenta::DefineSeparately> >> {
template <concepts::Cell CELL, concepts::Parameters PARAMETERS, concepts::BaseType V=typename CELL::value_t>
CellStatistic<V> collide(CELL& cell, PARAMETERS& parameters) any_platform {
auto x19 = cell.template getFieldComponent<momenta::FixedVelocityMomentumGeneric::VELOCITY>(0);
auto x20 = cell.template getFieldComponent<momenta::FixedVelocityMomentumGeneric::VELOCITY>(1);
auto x21 = cell.template getFieldComponent<momenta::FixedVelocityMomentumGeneric::VELOCITY>(2);
auto x22 = parameters.template get<descriptors::OMEGA>();
auto x23 = x22 + V{-1};
auto x24 = V{0.5}*cell[10];
auto x25 = V{0.5}*cell[2];
auto x26 = V{2}*cell[14];
auto x27 = V{1} / (x20 + V{-1});
auto x28 = V{0.25}*cell[0] + V{0.25}*cell[12] + V{0.5}*cell[14] + V{0.25}*cell[3] + V{0.25};
auto x29 = V{1} / (x19 + V{1});
auto x30 = cell[0] + cell[12] + cell[3] + x26 + V{1};
auto x31 = V{2}*cell[10] + cell[11] + V{2}*cell[13] + V{2}*cell[15] + V{2}*cell[16] + cell[17] + cell[18] + cell[2] + cell[8] + cell[9] + x30;
auto x32 = cell[10] + cell[15] + cell[16] + cell[1] + V{2}*cell[2] + V{2}*cell[4] + cell[6] + cell[7] + V{2}*cell[8] + V{2}*cell[9] + x30;
auto x33 = -V{0.0138888888888889}*x27*x32 + V{0.0138888888888889}*x29*x31;
auto x34 = V{3}*x19;
auto x35 = -x34;
auto x36 = x19 - x20;
auto x37 = -V{4.5}*x36*x36;
auto x38 = V{3}*x20;
auto x39 = x21*x21;
auto x40 = V{1.5}*x39;
auto x41 = x19*x19;
auto x42 = V{1.5}*x41;
auto x43 = x20*x20;
auto x44 = V{1.5}*x43;
auto x45 = x42 + x44 + V{-1};
auto x46 = x40 + x45;
auto x47 = x38 + x46;
auto x48 = x35 + x37 + x47;
auto x49 = x46*(-V{0.166666666666667}*x27*x32 + V{0.166666666666667}*x29*x31);
auto x50 = -V{0.25}*x27*x32 + V{0.25}*x29*x31;
auto x51 = -x36;
auto x52 = -x38 + x46;
auto x53 = x34 + x52;
auto x54 = x53 - V{4.5}*x51*x51;
auto x55 = -V{0.0277777777777778}*x27*x32 + V{0.0277777777777778}*x29*x31;
auto x56 = V{3}*x43;
auto x57 = -x40;
auto x58 = V{1} - x42;
auto x59 = x57 + x58;
auto x60 = x38 + x59;
auto x61 = x56 + x60;
auto x62 = x55*x61;
auto x63 = x20 + x21;
auto x64 = V{4.5}*(x63*x63);
auto x65 = V{3}*x21;
auto x66 = -x44;
auto x67 = x65 + x66;
auto x68 = x60 + x64 + x67;
auto x69 = x19 + x20;
auto x70 = V{4.5}*(x69*x69);
auto x71 = x34 + x66;
auto x72 = x60 + x70 + x71;
auto x73 = x19 + x21;
auto x74 = V{4.5}*(x73*x73);
auto x75 = x34 + x59 + x67 + x74;
auto x76 = -V{0.0555555555555556}*x27*x32 + V{0.0555555555555556}*x29*x31;
auto x77 = V{3}*x41;
auto x78 = x57 + x71 + x77 + V{1};
auto x79 = -V{1.11022302462516e-16}*x27*x32 + V{1.11022302462516e-16}*x29*x31;
auto x80 = -V{8.32667268468867e-17}*x27*x32 + V{8.32667268468867e-17}*x29*x31;
auto x81 = x47 - x64 + x65;
auto x82 = -x21;
auto x83 = x20 + x82;
auto x84 = -x83;
auto x85 = -x65;
auto x86 = x47 + x85;
auto x87 = x86 - V{4.5}*x84*x84;
auto x88 = -V{4.5}*x83*x83;
auto x89 = x52 + x65 + x88;
auto x90 = x40 + V{-1};
auto x91 = x38 + x42 - x56 + x90;
auto x92 = x55*x91;
auto x93 = x19 + x82;
auto x94 = -V{4.5}*x93*x93;
auto x95 = x46 + x65;
auto x96 = x35 + x94 + x95;
auto x97 = V{1.11022302462516e-16}*cell[4];
auto x98 = V{5.55111512312578e-17}*cell[0] + V{5.55111512312578e-17}*cell[12] + V{1.11022302462516e-16}*cell[14] + V{5.55111512312578e-17}*cell[3] + V{5.55111512312578e-17};
auto x99 = V{1.11022302462516e-16}*cell[13];
auto x100 = V{3}*x39;
auto x101 = x100 + x58 + x67;
auto x102 = -x100 + x45 + x65;
auto x103 = V{6.66133814775094e-16}*cell[14] + x101*x55 - x102*x55 + x27*(V{5.55111512312578e-17}*cell[10] + V{5.55111512312578e-17}*cell[15] + V{5.55111512312578e-17}*cell[16] + V{5.55111512312578e-17}*cell[1] + V{1.11022302462516e-16}*cell[2] + V{5.55111512312578e-17}*cell[6] + V{5.55111512312578e-17}*cell[7] + V{1.11022302462516e-16}*cell[8] + V{1.11022302462516e-16}*cell[9] + x97 + x98) - x29*(V{1.11022302462516e-16}*cell[10] + V{5.55111512312578e-17}*cell[11] + V{1.11022302462516e-16}*cell[15] + V{1.11022302462516e-16}*cell[16] + V{5.55111512312578e-17}*cell[17] + V{5.55111512312578e-17}*cell[18] + V{5.55111512312578e-17}*cell[2] + V{5.55111512312578e-17}*cell[8] + V{5.55111512312578e-17}*cell[9] + x98 + x99) - x49 - x54*(-V{4.62592926927149e-18}*x27*x32 + V{4.62592926927149e-18}*x29*x31) + V{-2.22044604925031e-16};
auto x104 = x29*(V{2.22044604925031e-16}*cell[10] + V{1.66533453693773e-16}*cell[11] + V{1.11022302462516e-16}*cell[12] + V{3.33066907387547e-16}*cell[13] + V{4.44089209850063e-16}*cell[15] + V{2.22044604925031e-16}*cell[16] + V{4.71844785465692e-16}*cell[17] + V{5.27355936696949e-16}*cell[18] + V{2.22044604925031e-16}*cell[1] + V{1.66533453693773e-16}*cell[2] + V{1.11022302462516e-16}*cell[3] + V{3.33066907387547e-16}*cell[4] + V{4.44089209850063e-16}*cell[6] + V{2.22044604925031e-16}*cell[7] + V{4.71844785465692e-16}*cell[8] + V{5.27355936696949e-16}*cell[9] + x103 + x33*x68 - x33*x81 - x33*x87 - x33*x89 - x39*(-V{5.55111512312578e-17}*x27*x32 + V{5.55111512312578e-17}*x29*x31) - x41*x79 - x43*x80 - x48*(-V{0.0277777777777778}*x27*x32 + V{0.0277777777777778}*x29*x31) + x55*x72 + x55*x75 - x55*x96 + x62 + x76*x78 - x92);
auto x105 = x34 - x74 + x95;
auto x106 = -x93;
auto x107 = x34 + x46 + x85;
auto x108 = x107 - V{4.5}*x106*x106;
auto x109 = x34 + x44 - x77 + x90;
auto x110 = x34 + x47 - x70;
auto x111 = x27*(V{1.66533453693773e-16}*cell[10] + V{2.22044604925031e-16}*cell[11] + V{9.71445146547012e-17}*cell[12] + V{4.71844785465692e-16}*cell[15] + V{5.27355936696949e-16}*cell[16] + V{2.22044604925031e-16}*cell[17] + V{2.22044604925031e-16}*cell[18] + V{1.66533453693773e-16}*cell[1] + V{2.22044604925031e-16}*cell[2] + V{9.71445146547012e-17}*cell[3] + V{4.71844785465692e-16}*cell[6] + V{5.27355936696949e-16}*cell[7] + V{2.22044604925031e-16}*cell[8] + V{2.22044604925031e-16}*cell[9] + x103 - x105*x33 - x108*x33 - x109*x55 - x110*x55 + x33*x75 - x33*x96 - x39*(-V{4.85722573273506e-17}*x27*x32 + V{4.85722573273506e-17}*x29*x31) - x41*x80 - x43*x79 - x48*(-V{0.0277777777777778}*x27*x32 + V{0.0277777777777778}*x29*x31) + x55*x78 - x55*x81 - x55*x87 - x76*x91 + x97 + x99);
auto x112 = x104 - x111;
auto x113 = V{0.166666666666667}*cell[17];
auto x114 = V{0.166666666666667}*cell[18];
auto x115 = V{0.166666666666667}*cell[8];
auto x116 = V{0.166666666666667}*cell[9];
auto x117 = V{0.0277777777777778}*x27*x32 - V{0.0277777777777778}*x29*x31;
auto x118 = V{0.0833333333333333}*x27*x32 - V{0.0833333333333333}*x29*x31;
auto x119 = V{0.00115740740740741}*x27*x32 - V{0.00115740740740741}*x29*x31;
auto x120 = x37 + x53;
auto x121 = x119*x48;
auto x122 = V{0.0416666666666667}*x27*x32 - V{0.0416666666666667}*x29*x31;
auto x123 = x122*x39;
auto x124 = V{0.0833333333333334}*cell[13];
auto x125 = V{0.0833333333333334}*cell[4];
auto x126 = V{0.166666666666667}*cell[14];
auto x127 = V{0.0833333333333333}*cell[12];
auto x128 = V{0.0833333333333333}*cell[3];
auto x129 = V{3.46944695195361e-18}*cell[0] + V{3.46944695195361e-18}*cell[12] + V{6.93889390390723e-18}*cell[14] + V{3.46944695195361e-18}*cell[3] + V{3.46944695195361e-18};
auto x130 = x27*(V{3.46944695195361e-18}*cell[10] + V{3.46944695195361e-18}*cell[15] + V{3.46944695195361e-18}*cell[16] + V{3.46944695195361e-18}*cell[1] + V{6.93889390390723e-18}*cell[2] + V{6.93889390390723e-18}*cell[4] + V{3.46944695195361e-18}*cell[6] + V{3.46944695195361e-18}*cell[7] + V{6.93889390390723e-18}*cell[8] + V{6.93889390390723e-18}*cell[9] + x129);
auto x131 = x29*(V{6.93889390390723e-18}*cell[10] + V{3.46944695195361e-18}*cell[11] + V{6.93889390390723e-18}*cell[13] + V{6.93889390390723e-18}*cell[15] + V{6.93889390390723e-18}*cell[16] + V{3.46944695195361e-18}*cell[17] + V{3.46944695195361e-18}*cell[18] + V{3.46944695195361e-18}*cell[2] + V{3.46944695195361e-18}*cell[8] + V{3.46944695195361e-18}*cell[9] + x129);
auto x132 = -x131;
auto x133 = x124 + x125 + x126 - x127 - x128 + x130 + x132 + V{-0.0555555555555555};
auto x134 = V{0.0833333333333333}*cell[11];
auto x135 = V{0.0833333333333333}*cell[2];
auto x136 = x122*x43;
auto x137 = V{0.0833333333333334}*cell[15] + V{0.0833333333333334}*cell[16] + V{0.0833333333333334}*cell[6] + V{0.0833333333333334}*cell[7] - x134 - x135 - x136;
auto x138 = V{0.0833333333333333}*cell[10];
auto x139 = V{0.0833333333333333}*cell[1];
auto x140 = V{0.166666666666667}*cell[11];
auto x141 = V{0.166666666666667}*cell[2];
auto x142 = V{0.0833333333333334}*cell[17];
auto x143 = V{0.0833333333333334}*cell[18];
auto x144 = V{0.0833333333333334}*cell[8];
auto x145 = V{0.0833333333333334}*cell[9];
auto x146 = -V{0.00115740740740741}*x27*x32 + V{0.00115740740740741}*x29*x31;
auto x147 = x146*x48;
auto x148 = -V{0.0416666666666667}*x27*x32 + V{0.0416666666666667}*x29*x31;
auto x149 = x148*x41;
auto x150 = x148*x39;
auto x151 = -x124 - x125 - x126 + x127 + x128 - x130 + x131 + V{0.0555555555555555};
auto x152 = V{0.00231481481481481}*x27*x32 - V{0.00231481481481481}*x29*x31;
auto x153 = -x138 - x139 + x142 + x143 + x144 + x145;
auto x154 = V{0.166666666666667}*cell[12] - V{0.166666666666667}*cell[13] - V{0.333333333333333}*cell[14] + V{0.166666666666667}*cell[3] - V{0.166666666666667}*cell[4] + x118*x39 - x120*x152 - x122*x41 + x130 + x132 + x137 + x152*x48 + x153 + V{-0.0555555555555555};
auto x155 = V{0.0138888888888889}*x27*x32 - V{0.0138888888888889}*x29*x31;
auto x156 = V{0.00115740740740741}*x27*x32 - V{0.00115740740740741}*x29*x31;
auto x157 = x27*x32 - x29*x31;
auto x158 = V{0.125}*x157*x19;
auto x159 = x158*x20;
auto x160 = V{0.0208333333333333}*x27*x32 - V{0.0208333333333333}*x29*x31;
auto x161 = V{0.0208333333333333}*cell[0] + V{0.0208333333333333}*cell[12] + V{0.0416666666666667}*cell[14] + V{0.0208333333333333}*cell[3] + V{0.0208333333333333};
auto x162 = x27*(V{0.0208333333333333}*cell[10] + V{0.0208333333333333}*cell[15] + V{0.0208333333333333}*cell[16] + V{0.0208333333333333}*cell[1] + V{0.0416666666666667}*cell[2] + V{0.0416666666666667}*cell[4] + V{0.0208333333333333}*cell[6] + V{0.0208333333333333}*cell[7] + V{0.0416666666666667}*cell[8] + V{0.0416666666666667}*cell[9] + x161);
auto x163 = -x29*(V{0.0416666666666667}*cell[10] + V{0.0208333333333333}*cell[11] + V{0.0416666666666667}*cell[13] + V{0.0416666666666667}*cell[15] + V{0.0416666666666667}*cell[16] + V{0.0208333333333333}*cell[17] + V{0.0208333333333333}*cell[18] + V{0.0208333333333333}*cell[2] + V{0.0208333333333333}*cell[8] + V{0.0208333333333333}*cell[9] + x161);
auto x164 = V{0.0416666666666667}*x27*x32 - V{0.0416666666666667}*x29*x31;
auto x165 = V{0.0833333333333333}*cell[10] + V{0.0416666666666667}*cell[17] + V{0.0416666666666667}*cell[18] + V{0.0833333333333333}*cell[1] + V{0.0416666666666667}*cell[8] + V{0.0416666666666667}*cell[9] + x162 + x163 + x164*x41 + V{0.0138888888888889};
auto x166 = V{0.0833333333333333}*cell[11] + V{0.0416666666666667}*cell[15] + V{0.0416666666666667}*cell[16] + V{0.0833333333333333}*cell[2] + V{0.0416666666666667}*cell[6] + V{0.0416666666666667}*cell[7] + x164*x43;
auto x167 = -V{0.0416666666666667}*cell[12] - V{0.0416666666666667}*cell[3] - x160*x39 + x165 + x166;
auto x168 = V{0.416666666666667}*cell[13] - V{0.166666666666667}*cell[14] + V{0.416666666666667}*cell[4] - x120*x156 + x156*x48 + x159 + x167;
auto x169 = V{0.00578703703703704}*x27*x32 - V{0.00578703703703704}*x29*x31;
auto x170 = -V{0.0833333333333333}*cell[13] + V{0.833333333333333}*cell[14] - V{0.0833333333333333}*cell[4] - x159 + x167;
auto x171 = x158*x21;
auto x172 = V{0.000578703703703704}*x27*x32 - V{0.000578703703703704}*x29*x31;
auto x173 = V{0.0833333333333333}*cell[12] + V{0.0416666666666667}*cell[13] + V{0.0833333333333334}*cell[14] + V{0.0833333333333333}*cell[3] + V{0.0416666666666667}*cell[4] + x120*x172 + x164*x39 - x172*x48;
auto x174 = -V{0.0416666666666667}*cell[11] - V{0.0416666666666667}*cell[2] - x160*x43 + x165 + x173;
auto x175 = V{0.416666666666667}*cell[15] - V{0.0833333333333333}*cell[16] + V{0.416666666666667}*cell[6] - V{0.0833333333333333}*cell[7] + x171 + x174;
auto x176 = -V{0.0833333333333333}*cell[15] + V{0.416666666666667}*cell[16] - V{0.0833333333333333}*cell[6] + V{0.416666666666667}*cell[7] - x171 + x174;
auto x177 = V{0.125}*x157*x20*x21;
auto x178 = -V{0.0416666666666667}*cell[10] - V{0.0416666666666667}*cell[1] - x160*x41 + x162 + x163 + x166 + x173 + V{0.0138888888888889};
auto x179 = V{0.416666666666667}*cell[17] - V{0.0833333333333333}*cell[18] + V{0.416666666666667}*cell[8] - V{0.0833333333333333}*cell[9] + x177 + x178;
auto x180 = -V{0.0833333333333333}*cell[17] + V{0.416666666666667}*cell[18] - V{0.0833333333333333}*cell[8] + V{0.416666666666667}*cell[9] - x177 + x178;
auto x181 = -x104 + x111;
auto x182 = -x157;
auto x0 = -x22*(V{0.166666666666667}*x112*x46 + V{0.333333333333333}) + x23*(V{0.5}*cell[11] + V{0.5}*cell[12] + V{1}*cell[13] + V{1}*cell[15] + V{1}*cell[16] + V{1}*cell[17] + V{1}*cell[18] + V{0.5}*cell[1] + V{0.5}*cell[3] + V{1}*cell[4] + V{1}*cell[6] + V{1}*cell[7] + V{1}*cell[8] + V{1}*cell[9] + x24 + x25 + x26 + x27*(V{0.25}*cell[10] + V{0.25}*cell[15] + V{0.25}*cell[16] + V{0.25}*cell[1] + V{0.5}*cell[4] + V{0.25}*cell[6] + V{0.25}*cell[7] + V{0.5}*cell[8] + V{0.5}*cell[9] + x25 + x28) - x29*(V{0.25}*cell[11] + V{0.5}*cell[13] + V{0.5}*cell[15] + V{0.5}*cell[16] + V{0.25}*cell[17] + V{0.25}*cell[18] + V{0.25}*cell[2] + V{0.25}*cell[8] + V{0.25}*cell[9] + x24 + x28) + x33*x48 - x33*x54 - x39*x50 - x41*x50 - x43*x50 + x49 + V{0.833333333333333});
auto x1 = -x22*(V{0.0277777777777778}*x109*x112 + V{0.0555555555555556}) - x23*(V{0.166666666666667}*cell[10] + V{0.166666666666667}*cell[1] + x109*x117 - x113 - x114 - x115 - x116 + x118*x41 + x119*x120 - x121 - x123 + x133 + x137);
auto x2 = -x22*(V{0.0277777777777778}*x112*x91 + V{0.0555555555555556}) + x23*(V{0.166666666666667}*cell[15] + V{0.166666666666667}*cell[16] + V{0.166666666666667}*cell[6] + V{0.166666666666667}*cell[7] + x138 + x139 - x140 - x141 - x142 - x143 - x144 - x145 + x146*x54 - x147 - x149 - x150 + x151 + x43*(-V{0.0833333333333333}*x27*x32 + V{0.0833333333333333}*x29*x31) + x92);
auto x3 = -x22*(V{0.0277777777777778}*x102*x112 + V{0.0555555555555556}) - x23*(x102*x117 + x154);
auto x4 = -x22*(V{0.0138888888888889}*x110*x112 + V{0.0277777777777778}) - x23*(x110*x155 + x168);
auto x5 = -x22*(V{0.0138888888888889}*x112*x54 + V{0.0277777777777778}) - x23*(x120*(V{0.0196759259259259}*x27*x32 - V{0.0196759259259259}*x29*x31) - x169*x48 + x170);
auto x6 = -x22*(V{0.0138888888888889}*x105*x112 + V{0.0277777777777778}) - x23*(x105*x155 + x175);
auto x7 = -x22*(V{0.0138888888888889}*x108*x112 + V{0.0277777777777778}) - x23*(x155*(x107 + x94) + x176);
auto x8 = -x22*(V{0.0138888888888889}*x112*x81 + V{0.0277777777777778}) - x23*(x155*x81 + x179);
auto x9 = -x22*(V{0.0138888888888889}*x112*x87 + V{0.0277777777777778}) - x23*(x155*(x86 + x88) + x180);
auto x10 = -x22*(V{0.0277777777777778}*x181*x78 + V{0.0555555555555556}) - x23*(V{0.166666666666667}*cell[10] + V{0.0833333333333334}*cell[15] + V{0.0833333333333334}*cell[16] + V{0.166666666666667}*cell[1] + V{0.0833333333333334}*cell[6] + V{0.0833333333333334}*cell[7] - x113 - x114 - x115 - x116 - x117*x78 + V{0.00115740740740741}*x120*x157 - x121 - x123 - x134 - x135 - x136 - x151 + V{0.0833333333333333}*x157*x41);
auto x11 = -x22*(V{0.0277777777777778}*x181*x61 + V{0.0555555555555556}) + x23*(V{0.166666666666667}*cell[15] + V{0.166666666666667}*cell[16] + V{0.166666666666667}*cell[6] + V{0.166666666666667}*cell[7] - x133 - x140 - x141 - x147 - x149 - x150 - x153 + V{0.0833333333333333}*x182*x43 + V{0.00115740740740741}*x182*x54 - x62);
auto x12 = -x22*(V{0.0277777777777778}*x101*x181 + V{0.0555555555555556}) - x23*(-x101*x117 + x154);
auto x13 = -x22*(V{0.0138888888888889}*x181*x72 + V{0.0277777777777778}) - x23*(-x155*x72 + x168);
auto x14 = -x22*(V{0.0138888888888889}*x112*x48 + V{0.0277777777777778}) - x23*(x120*x169 + x170 + x48*(V{0.00810185185185185}*x27*x32 - V{0.00810185185185185}*x29*x31));
auto x15 = -x22*(V{0.0138888888888889}*x181*x75 + V{0.0277777777777778}) - x23*(-x155*x75 + x175);
auto x16 = -x22*(V{0.0138888888888889}*x112*x96 + V{0.0277777777777778}) - x23*(x155*x96 + x176);
auto x17 = -x22*(V{0.0138888888888889}*x181*x68 + V{0.0277777777777778}) - x23*(-x155*x68 + x179);
auto x18 = -x22*(V{0.0138888888888889}*x112*x89 + V{0.0277777777777778}) - x23*(x155*x89 + x180);
cell[0] = x0;
cell[1] = x1;
cell[2] = x2;
cell[3] = x3;
cell[4] = x4;
cell[5] = x5;
cell[6] = x6;
cell[7] = x7;
cell[8] = x8;
cell[9] = x9;
cell[10] = x10;
cell[11] = x11;
cell[12] = x12;
cell[13] = x13;
cell[14] = x14;
cell[15] = x15;
cell[16] = x16;
cell[17] = x17;
cell[18] = x18;
return { V{0.5}*x112, x39 + x41 + x43 };
}
};

}

}
